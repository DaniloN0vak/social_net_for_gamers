// <auto-generated />
using System;
using Diplomwork.Models.DatabaseModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diplomwork.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("EntityId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("EntityId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BackgroundUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.ChatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsers", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Clip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("StreamId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StreamId");

                    b.ToTable("Clips", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BunnerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Communities", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Currency", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<double>("AmountOfOneDollar")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Entity", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Entities", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsListed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("MediumUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Medium", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsBloored")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int?>("ReferenceCommunityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceUserId")
                        .HasColumnType("int");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReferenceCommunityId");

                    b.HasIndex("ReferenceUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.NotificationType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotificationTypes", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.OrderStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 6, 18, 14, 36, 21, 780, DateTimeKind.Local).AddTicks(5669));

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<short>("ProviderId")
                        .HasColumnType("smallint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.PaymentStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentStatuses", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("AuthorCommunityId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsCommunityPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<long?>("ReplyToPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCommunityId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("ReplyToPostId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.PostTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Provider", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Providers", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ReportedPostId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReportedUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReportedPostId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.ReportStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReportStatuses", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("UserStateId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserStateId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievement", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("DarkMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserState", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserStates", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.VideoStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsLive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StreamerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StreamerId");

                    b.ToTable("VideoStreams", (string)null);
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.AuditLog", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Actor")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Entity", "Entity")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Chat", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Creator")
                        .WithMany("Chats")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.ChatUser", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Clip", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Creator")
                        .WithMany("Clips")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.VideoStream", "Stream")
                        .WithMany("Clips")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Stream");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Community", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Creator")
                        .WithMany("Communities")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Item", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Currency", "Currency")
                        .WithMany("Items")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Medium", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Message", "Message")
                        .WithMany("Media")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Message", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Message", "ReplyToMessage")
                        .WithMany("Messages")
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Notification", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Author")
                        .WithMany("AuthorNotifications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Community", "ReferenceCommunity")
                        .WithMany("Notifications")
                        .HasForeignKey("ReferenceCommunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "ReferenceUser")
                        .WithMany("ReferenceNotifications")
                        .HasForeignKey("ReferenceUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ReferenceCommunity");

                    b.Navigation("ReferenceUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Order", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Item", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Item");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Payment", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Currency", "Currency")
                        .WithMany("Payments")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Provider", "Provider")
                        .WithMany("Payments")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.PaymentStatus", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Provider");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Post", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Community", "AuthorCommunity")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorCommunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "AuthorUser")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Post", "ReplyToPost")
                        .WithMany("Posts")
                        .HasForeignKey("ReplyToPostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AuthorCommunity");

                    b.Navigation("AuthorUser");

                    b.Navigation("ReplyToPost");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.PostTag", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Report", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Post", "ReportedPost")
                        .WithMany("Reports")
                        .HasForeignKey("ReportedPostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "ReportedUser")
                        .WithMany("ReportsAgainst")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Reporter")
                        .WithMany("MyReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.ReportStatus", "Status")
                        .WithMany("Reports")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportedPost");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Transfer", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Currency", "Currency")
                        .WithMany("Transfers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "FromUser")
                        .WithMany("SentTransfers")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "ToUser")
                        .WithMany("AcceptedTransfers")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.User", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.UserState", "UserState")
                        .WithMany("Users")
                        .HasForeignKey("UserStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");

                    b.Navigation("UserState");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserAchievement", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserSetting", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.VideoStream", b =>
                {
                    b.HasOne("Diplomwork.Models.DatabaseModels.Tables.User", "Streamer")
                        .WithMany("VideoStreams")
                        .HasForeignKey("StreamerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Streamer");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Account", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Chat", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Community", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Currency", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Entity", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Item", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Message", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Post", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("Posts");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Provider", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.ReportStatus", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.User", b =>
                {
                    b.Navigation("AcceptedTransfers");

                    b.Navigation("AuditLogs");

                    b.Navigation("AuthorNotifications");

                    b.Navigation("ChatUsers");

                    b.Navigation("Chats");

                    b.Navigation("Clips");

                    b.Navigation("Communities");

                    b.Navigation("Items");

                    b.Navigation("Messages");

                    b.Navigation("MyReports");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Posts");

                    b.Navigation("ReferenceNotifications");

                    b.Navigation("ReportsAgainst");

                    b.Navigation("SentTransfers");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserSettings");

                    b.Navigation("VideoStreams");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.UserState", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Diplomwork.Models.DatabaseModels.Tables.VideoStream", b =>
                {
                    b.Navigation("Clips");
                });
#pragma warning restore 612, 618
        }
    }
}
