{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\picker-containers\\\\gif-picker-container\\\\GifPickerContainer.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GifPickerContainer({\n  setGif\n}) {\n  _s();\n  const gifPanelRef = useRef(null);\n  const [isGifPanelOpen, setIsGifPanelOpen] = useState(false);\n  useOutsideClick(gifPanelRef, () => setIsGifPanelOpen(false), isGifPanelOpen);\n  const handleGifSelect = gifUrl => {\n    if (gifList.length < 11) {\n      const newGif = {\n        id: `${Date.now()}_gif`,\n        type: 'selected_gif',\n        src: gifUrl\n      };\n      setGif(newGif);\n      setIsGifPanelOpen(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleGifClick,\n      children: isGifPanelOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: gifImgSelected,\n        alt: \"gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: gifImg,\n        alt: \"gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), isGifPanelOpen && /*#__PURE__*/_jsxDEV(ModalChatContainer, {\n      elementRef: gifPanelRef,\n      children: /*#__PURE__*/_jsxDEV(GifPicker, {\n        onSelect: handleGifSelect,\n        setIsGifPanelOpen: setIsGifPanelOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(GifPickerContainer, \"K2LcszompOwtV1sUWfHoVKNNECo=\", true);\n_c = GifPickerContainer;\n;\nvar _c;\n$RefreshReg$(_c, \"GifPickerContainer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","GifPickerContainer","setGif","_s","gifPanelRef","useRef","isGifPanelOpen","setIsGifPanelOpen","useState","useOutsideClick","handleGifSelect","gifUrl","gifList","length","newGif","id","Date","now","type","src","children","onClick","handleGifClick","gifImgSelected","alt","fileName","_jsxFileName","lineNumber","columnNumber","gifImg","ModalChatContainer","elementRef","GifPicker","onSelect","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/picker-containers/gif-picker-container/GifPickerContainer.js"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nexport default function GifPickerContainer ({ setGif }) {\r\n    const gifPanelRef = useRef(null);\r\n    const [isGifPanelOpen, setIsGifPanelOpen] = useState(false);\r\n    useOutsideClick(gifPanelRef, () => setIsGifPanelOpen(false), isGifPanelOpen);\r\n    const handleGifSelect = (gifUrl) => {\r\n        if (gifList.length < 11) {\r\n\r\n            const newGif = {\r\n                id: (`${Date.now()}_gif`),\r\n                type: 'selected_gif',\r\n                src: gifUrl\r\n            };\r\n            setGif(newGif);\r\n            setIsGifPanelOpen(false);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={handleGifClick}>\r\n                {isGifPanelOpen ? (\r\n                    <img src={gifImgSelected} alt=\"gif\" />\r\n                ) : <img src={gifImg} alt=\"gif\" />}\r\n            </button>\r\n\r\n            {isGifPanelOpen && (\r\n                <ModalChatContainer elementRef={gifPanelRef}>\r\n                    <GifPicker onSelect={handleGifSelect} setIsGifPanelOpen={setIsGifPanelOpen} />\r\n                </ModalChatContainer>\r\n            )}\r\n        </>\r\n    )\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG1B,eAAe,SAASC,kBAAkBA,CAAE;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAMC,WAAW,GAAGC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC3DC,eAAe,CAACL,WAAW,EAAE,MAAMG,iBAAiB,CAAC,KAAK,CAAC,EAAED,cAAc,CAAC;EAC5E,MAAMI,eAAe,GAAIC,MAAM,IAAK;IAChC,IAAIC,OAAO,CAACC,MAAM,GAAG,EAAE,EAAE;MAErB,MAAMC,MAAM,GAAG;QACXC,EAAE,EAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,MAAO;QACzBC,IAAI,EAAE,cAAc;QACpBC,GAAG,EAAER;MACT,CAAC;MACDT,MAAM,CAACY,MAAM,CAAC;MACdP,iBAAiB,CAAC,KAAK,CAAC;IAC5B;EACJ,CAAC;EACD,oBACIT,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACItB,OAAA;MAAQoB,IAAI,EAAC,QAAQ;MAACG,OAAO,EAAEC,cAAe;MAAAF,QAAA,EACzCd,cAAc,gBACXR,OAAA;QAAKqB,GAAG,EAAEI,cAAe;QAACC,GAAG,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBACtC9B,OAAA;QAAKqB,GAAG,EAAEU,MAAO;QAACL,GAAG,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,EAERtB,cAAc,iBACXR,OAAA,CAACgC,kBAAkB;MAACC,UAAU,EAAE3B,WAAY;MAAAgB,QAAA,eACxCtB,OAAA,CAACkC,SAAS;QAACC,QAAQ,EAAEvB,eAAgB;QAACH,iBAAiB,EAAEA;MAAkB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CACvB;EAAA,eACH,CAAC;AAEX;AAACzB,EAAA,CA/BuBF,kBAAkB;AAAAiC,EAAA,GAAlBjC,kBAAkB;AA+BzC;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}