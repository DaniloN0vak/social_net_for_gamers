{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from 'react';\n// import styles from './CustomAudioPlayer.module.css';\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\n// import play from '../../../assets/images/custom-audio-player/play.png';\n// import AudioTimer from '../audio-recorder/AudioTimer';\n\n// function CustomAudioPlayer({ src }) {\n//     const audioRef = useRef(null);\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [progress, setProgress] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const [currentTime, setCurrentTime] = useState(0);\n\n//     const togglePlay = () => {\n//         const audio = audioRef.current;\n//         if (audio.paused) {\n//             audio.play().then(() => {\n//                 setIsPlaying(true);\n//                 setCurrentTime(audio.currentTime);\n//                 setProgress((audio.currentTime / audio.duration) * 100);\n//             }).catch((err) => {\n//                 console.error(\"Playback failed:\", err);\n//             });\n//         } else {\n//             audio.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n\n//     const handleTimeUpdate = () => {\n//         const audio = audioRef.current;\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\n//             setCurrentTime(audio.currentTime);\n//             setProgress((audio.currentTime / audio.duration) * 100);\n//         } else {\n//             setProgress(0);\n//             setCurrentTime(0);\n//         }\n//     };\n\n//     const handleProgressClick = (e) => {\n//         if (duration <= 0) return;\n\n//         const rect = e.currentTarget.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left;\n//         const newProgress = clickX / rect.width;\n//         const audio = audioRef.current;\n//         audio.currentTime = newProgress * audio.duration;\n//         setProgress(newProgress * 100);\n//         setCurrentTime(audio.currentTime);\n//     };\n\n//     useEffect(() => {\n//         const audio = audioRef.current;\n\n//         const handleLoadedMetadata = () => {\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                 setDuration(audio.duration);\n//             } else {\n//                 audio.currentTime = 1e101;\n//                 audio.ontimeupdate = function () {\n//                     audio.ontimeupdate = null;\n//                     audio.currentTime = 0;\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                         setDuration(audio.duration);\n//                     }\n//                 };\n//             }\n//         };\n\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n//         audio.load();\n\n//         return () => {\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n//         };\n//     }, [src]);\n\n//     return (\n//         <div className={styles.audioPlayer}>\n//             <audio\n//                 ref={audioRef}\n//                 src={src}\n//                 onTimeUpdate={handleTimeUpdate}\n//                 onEnded={() => setIsPlaying(false)}\n//                 preload=\"auto\"\n//             />\n//             <button\n//                 type='button'\n//                 onClick={togglePlay}\n//                 className={styles.playButton}\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n//             >\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\n//             </button>\n//             <div\n//                 className={styles.progressBar}\n//                 onClick={handleProgressClick}\n//                 role=\"progressbar\"\n//                 aria-valuemin={0}\n//                 aria-valuemax={duration}\n//                 aria-valuenow={currentTime}\n//                 tabIndex={0}\n//             >\n//                 <div\n//                     className={styles.progress}\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\n//                 />\n//             </div>\n//             <AudioTimer\n//                 isPaused={!isPlaying}\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\n//                 withDot={false}\n//             />\n//         </div>\n//     );\n// }\n\n// export default CustomAudioPlayer;\n\n// AudioPlayer.jsx\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = ({\n  src,\n  barCount = 80,\n  barWidth = 2,\n  barGap = 2,\n  playedColor = '#1AAAF5',\n  unplayedColor = '#BBBBBE'\n}) => {\n  _s();\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [peaks, setPeaks] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\n\n  // Загружаем и анализируем аудио, чтобы получить массив амплитуд\n  useEffect(() => {\n    if (!src) return;\n    const fetchAndDecode = async () => {\n      const resp = await fetch(src);\n      const arrayBuffer = await resp.arrayBuffer();\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const buffer = await audioCtx.decodeAudioData(arrayBuffer);\n      const rawData = buffer.getChannelData(0); // первый канал\n      const blockSize = Math.floor(rawData.length / barCount);\n      const filtered = new Float32Array(barCount);\n      for (let i = 0; i < barCount; i++) {\n        let sum = 0;\n        for (let j = 0; j < blockSize; j++) {\n          sum += Math.abs(rawData[i * blockSize + j]);\n        }\n        filtered[i] = sum / blockSize;\n      }\n      setPeaks(filtered);\n    };\n    fetchAndDecode();\n  }, [src, barCount]);\n\n  // Обновляем индекс текущей полоски при воспроизведении\n  const onTimeUpdate = useCallback(() => {\n    const audio = audioRef.current;\n    if (!audio || peaks.length === 0) return;\n    let idx = 0;\n    if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n      idx = Math.floor(audio.currentTime / audio.duration * peaks.length);\n      setCurrentPeakIndex(idx);\n    } else {\n      audio.currentTime = 1e101;\n      audio.ontimeupdate = function () {\n        audio.ontimeupdate = null;\n        audio.currentTime = 0;\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n          idx = Math.floor(audio.currentTime / audio.duration * peaks.length);\n          setCurrentPeakIndex(idx);\n        }\n      };\n    }\n  }, [peaks.length]);\n\n  // Play / Pause\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  // Рисуем полоски в канвасе\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const height = canvas.height;\n    const totalBars = peaks.length;\n    ctx.clearRect(0, 0, canvas.width, height);\n    peaks.forEach((val, i) => {\n      const barHeight = val * height;\n      const x = i * (barWidth + barGap);\n      ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\n      ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\n    });\n  }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'inline-block',\n      userSelect: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: (barWidth + barGap) * barCount,\n      height: 80,\n      style: {\n        verticalAlign: 'middle',\n        cursor: 'pointer'\n      },\n      onClick: togglePlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onTimeUpdate: onTimeUpdate,\n      onEnded: () => setIsPlaying(false),\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      style: {\n        marginLeft: 10,\n        padding: '6px 12px',\n        fontSize: 14,\n        cursor: 'pointer',\n        borderRadius: 4,\n        border: '1px solid #888',\n        background: isPlaying ? '#f44336' : '#2196F3',\n        color: '#fff'\n      },\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioPlayer, \"4n2rAeLrpVBjt/RGOImYlHKAyyU=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AudioPlayer","src","barCount","barWidth","barGap","playedColor","unplayedColor","_s","audioRef","canvasRef","peaks","setPeaks","isPlaying","setIsPlaying","currentPeakIndex","setCurrentPeakIndex","fetchAndDecode","resp","fetch","arrayBuffer","audioCtx","window","AudioContext","webkitAudioContext","buffer","decodeAudioData","rawData","getChannelData","blockSize","Math","floor","length","filtered","Float32Array","i","sum","j","abs","onTimeUpdate","audio","current","idx","isNaN","duration","Infinity","currentTime","ontimeupdate","togglePlay","pause","play","canvas","ctx","getContext","height","totalBars","clearRect","width","forEach","val","barHeight","x","fillStyle","fillRect","style","display","userSelect","children","ref","verticalAlign","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onEnded","marginLeft","padding","fontSize","borderRadius","border","background","color","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\r\n// import styles from './CustomAudioPlayer.module.css';\r\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\r\n// import play from '../../../assets/images/custom-audio-player/play.png';\r\n// import AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\n\r\n// function CustomAudioPlayer({ src }) {\r\n//     const audioRef = useRef(null);\r\n//     const [isPlaying, setIsPlaying] = useState(false);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [duration, setDuration] = useState(0);\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n\r\n//     const togglePlay = () => {\r\n//         const audio = audioRef.current;\r\n//         if (audio.paused) {\r\n//             audio.play().then(() => {\r\n//                 setIsPlaying(true);\r\n//                 setCurrentTime(audio.currentTime);\r\n//                 setProgress((audio.currentTime / audio.duration) * 100);\r\n//             }).catch((err) => {\r\n//                 console.error(\"Playback failed:\", err);\r\n//             });\r\n//         } else {\r\n//             audio.pause();\r\n//             setIsPlaying(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleTimeUpdate = () => {\r\n//         const audio = audioRef.current;\r\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\r\n//             setCurrentTime(audio.currentTime);\r\n//             setProgress((audio.currentTime / audio.duration) * 100);\r\n//         } else {\r\n//             setProgress(0);\r\n//             setCurrentTime(0);\r\n//         }\r\n//     };\r\n\r\n//     const handleProgressClick = (e) => {\r\n//         if (duration <= 0) return;\r\n\r\n//         const rect = e.currentTarget.getBoundingClientRect();\r\n//         const clickX = e.clientX - rect.left;\r\n//         const newProgress = clickX / rect.width;\r\n//         const audio = audioRef.current;\r\n//         audio.currentTime = newProgress * audio.duration;\r\n//         setProgress(newProgress * 100);\r\n//         setCurrentTime(audio.currentTime);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const audio = audioRef.current;\r\n\r\n//         const handleLoadedMetadata = () => {\r\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                 setDuration(audio.duration);\r\n//             } else {\r\n//                 audio.currentTime = 1e101;\r\n//                 audio.ontimeupdate = function () {\r\n//                     audio.ontimeupdate = null;\r\n//                     audio.currentTime = 0;\r\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                         setDuration(audio.duration);\r\n//                     }\r\n//                 };\r\n//             }\r\n//         };\r\n\r\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         audio.load();\r\n\r\n//         return () => {\r\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         };\r\n//     }, [src]);\r\n\r\n\r\n//     return (\r\n//         <div className={styles.audioPlayer}>\r\n//             <audio\r\n//                 ref={audioRef}\r\n//                 src={src}\r\n//                 onTimeUpdate={handleTimeUpdate}\r\n//                 onEnded={() => setIsPlaying(false)}\r\n//                 preload=\"auto\"\r\n//             />\r\n//             <button\r\n//                 type='button'\r\n//                 onClick={togglePlay}\r\n//                 className={styles.playButton}\r\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n//             >\r\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n//             </button>\r\n//             <div\r\n//                 className={styles.progressBar}\r\n//                 onClick={handleProgressClick}\r\n//                 role=\"progressbar\"\r\n//                 aria-valuemin={0}\r\n//                 aria-valuemax={duration}\r\n//                 aria-valuenow={currentTime}\r\n//                 tabIndex={0}\r\n//             >\r\n//                 <div\r\n//                     className={styles.progress}\r\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\r\n//                 />\r\n//             </div>\r\n//             <AudioTimer\r\n//                 isPaused={!isPlaying}\r\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\r\n//                 withDot={false}\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default CustomAudioPlayer;\r\n\r\n// AudioPlayer.jsx\r\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\r\n\r\nconst AudioPlayer = ({ src, barCount = 80, barWidth = 2, barGap = 2,\r\n    playedColor = '#1AAAF5', unplayedColor = '#BBBBBE' }) => {\r\n    const audioRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [peaks, setPeaks] = useState([]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\r\n\r\n    // Загружаем и анализируем аудио, чтобы получить массив амплитуд\r\n    useEffect(() => {\r\n        if (!src) return;\r\n        const fetchAndDecode = async () => {\r\n            const resp = await fetch(src);\r\n            const arrayBuffer = await resp.arrayBuffer();\r\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n            const buffer = await audioCtx.decodeAudioData(arrayBuffer);\r\n            const rawData = buffer.getChannelData(0); // первый канал\r\n            const blockSize = Math.floor(rawData.length / barCount);\r\n            const filtered = new Float32Array(barCount);\r\n            for (let i = 0; i < barCount; i++) {\r\n                let sum = 0;\r\n                for (let j = 0; j < blockSize; j++) {\r\n                    sum += Math.abs(rawData[i * blockSize + j]);\r\n                }\r\n                filtered[i] = sum / blockSize;\r\n            }\r\n            setPeaks(filtered);\r\n        };\r\n        fetchAndDecode();\r\n    }, [src, barCount]);\r\n\r\n    // Обновляем индекс текущей полоски при воспроизведении\r\n    const onTimeUpdate = useCallback(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio || peaks.length === 0) return;\r\n\r\n        let idx = 0;\r\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n            idx = Math.floor((audio.currentTime / audio.duration) * peaks.length);\r\n            setCurrentPeakIndex(idx);\r\n        } else {\r\n            audio.currentTime = 1e101;\r\n            audio.ontimeupdate = function () {\r\n                audio.ontimeupdate = null;\r\n                audio.currentTime = 0;\r\n                if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n                    idx = Math.floor((audio.currentTime / audio.duration) * peaks.length);\r\n                    setCurrentPeakIndex(idx);\r\n                }\r\n            };\r\n        }\r\n\r\n    }, [peaks.length]);\r\n\r\n    // Play / Pause\r\n    const togglePlay = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n        if (isPlaying) {\r\n            audio.pause();\r\n        } else {\r\n            audio.play();\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    // Рисуем полоски в канвасе\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        const height = canvas.height;\r\n        const totalBars = peaks.length;\r\n        ctx.clearRect(0, 0, canvas.width, height);\r\n\r\n        peaks.forEach((val, i) => {\r\n            const barHeight = val * height;\r\n            const x = i * (barWidth + barGap);\r\n            ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\r\n            ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\r\n        });\r\n    }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor]);\r\n\r\n    return (\r\n        <div style={{ display: 'inline-block', userSelect: 'none' }}>\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={(barWidth + barGap) * barCount}\r\n                height={80}\r\n                style={{ verticalAlign: 'middle', cursor: 'pointer' }}\r\n                onClick={togglePlay}\r\n            />\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                onTimeUpdate={onTimeUpdate}\r\n                onEnded={() => setIsPlaying(false)}\r\n                style={{ display: 'none' }}\r\n            />\r\n            <button\r\n                onClick={togglePlay}\r\n                style={{\r\n                    marginLeft: 10,\r\n                    padding: '6px 12px',\r\n                    fontSize: 14,\r\n                    cursor: 'pointer',\r\n                    borderRadius: 4,\r\n                    border: '1px solid #888',\r\n                    background: isPlaying ? '#f44336' : '#2196F3',\r\n                    color: '#fff',\r\n                }}\r\n            >\r\n                {isPlaying ? 'Pause' : 'Play'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AudioPlayer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}