{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\picker-containers\\\\emoji-picker-container\\\\EmojiPickerContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ModalChatContainer from \"../../modal-chat-container/ModalChatContainer\";\nimport EmojiPicker from \"../../emoji-picker/EmojiPicker\";\nimport useOutsideClick from \"../../modal-chat-container/useOutsideClick\";\nimport smiley from '../../../../assets/images/message-form/smiley.png';\nimport smileySelected from '../../../../assets/images/message-form/smileySelected.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EmojiPickerContainer({\n  setMessage,\n  textareaRef,\n  handleInput\n}) {\n  _s();\n  const emojiPickerRef = useRef(null);\n  const [isEmojiPickerOpen, setIsEmojiPickerOpen] = useState(false);\n  useOutsideClick(emojiPickerRef, () => setIsEmojiPickerOpen(false), isEmojiPickerOpen);\n  const handleEmojiClick = () => {\n    setIsEmojiPickerOpen(prev => !prev);\n  };\n  const [mainEmojis, setMainEmojis] = useState(() => {\n    try {\n      const saved = localStorage.getItem('mainEmojis');\n      return saved ? JSON.parse(saved) : [];\n    } catch (e) {\n      console.error('Failed to load emojis from localStorage:', e);\n      return [];\n    }\n  });\n  const handleEmojiSelect = emoji => {\n    if (textareaRef.current) {\n      const textarea = textareaRef.current;\n      const start = textarea.selectionStart;\n      const end = textarea.selectionEnd;\n      const value = textarea.value;\n      textarea.value = value.slice(0, start) + emoji + value.slice(end);\n      textarea.focus();\n      textarea.selectionStart = textarea.selectionEnd = start + emoji.length;\n      handleInput();\n      setMessage(textarea.value);\n      setMainEmojis(prevMainEmojis => {\n        const newList = [emoji, ...prevMainEmojis.filter(e => e !== emoji)];\n        const finalList = newList.slice(0, 44);\n        try {\n          localStorage.setItem('mainEmojis', JSON.stringify(finalList));\n        } catch (e) {\n          console.error('Failed to save emojis to localStorage:', e);\n        }\n        return finalList;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleEmojiClick,\n      children: isEmojiPickerOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: smileySelected,\n        alt: \"emoji\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: smiley,\n        alt: \"emoji\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 67\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), isEmojiPickerOpen && /*#__PURE__*/_jsxDEV(ModalChatContainer, {\n      elementRef: emojiPickerRef,\n      children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n        onSelect: handleEmojiSelect,\n        mainEmojis: mainEmojis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(EmojiPickerContainer, \"R7n9qG+aFf57JxuqLJJRCnG+k04=\", false, function () {\n  return [useOutsideClick];\n});\n_c = EmojiPickerContainer;\nexport default EmojiPickerContainer;\nvar _c;\n$RefreshReg$(_c, \"EmojiPickerContainer\");","map":{"version":3,"names":["React","useState","useRef","ModalChatContainer","EmojiPicker","useOutsideClick","smiley","smileySelected","jsxDEV","_jsxDEV","Fragment","_Fragment","EmojiPickerContainer","setMessage","textareaRef","handleInput","_s","emojiPickerRef","isEmojiPickerOpen","setIsEmojiPickerOpen","handleEmojiClick","prev","mainEmojis","setMainEmojis","saved","localStorage","getItem","JSON","parse","e","console","error","handleEmojiSelect","emoji","current","textarea","start","selectionStart","end","selectionEnd","value","slice","focus","length","prevMainEmojis","newList","filter","finalList","setItem","stringify","children","type","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","elementRef","onSelect","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/picker-containers/emoji-picker-container/EmojiPickerContainer.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport ModalChatContainer from \"../../modal-chat-container/ModalChatContainer\";\r\nimport EmojiPicker from \"../../emoji-picker/EmojiPicker\";\r\nimport useOutsideClick from \"../../modal-chat-container/useOutsideClick\";\r\nimport smiley from '../../../../assets/images/message-form/smiley.png'\r\nimport smileySelected from '../../../../assets/images/message-form/smileySelected.png'\r\n\r\nfunction EmojiPickerContainer({ setMessage, textareaRef, handleInput }) {\r\n    const emojiPickerRef = useRef(null);\r\n    const [isEmojiPickerOpen, setIsEmojiPickerOpen] = useState(false);\r\n    useOutsideClick(emojiPickerRef, () => setIsEmojiPickerOpen(false), isEmojiPickerOpen);\r\n\r\n    const handleEmojiClick = () => {\r\n        setIsEmojiPickerOpen((prev) => !prev);\r\n    };\r\n\r\n    const [mainEmojis, setMainEmojis] = useState(() => {\r\n        try {\r\n            const saved = localStorage.getItem('mainEmojis');\r\n            return saved ? JSON.parse(saved) : [];\r\n        } catch (e) {\r\n            console.error('Failed to load emojis from localStorage:', e);\r\n            return [];\r\n        }\r\n    });\r\n\r\n\r\n    const handleEmojiSelect = (emoji) => {\r\n        if (textareaRef.current) {\r\n            const textarea = textareaRef.current;\r\n            const start = textarea.selectionStart;\r\n            const end = textarea.selectionEnd;\r\n            const value = textarea.value;\r\n            textarea.value = value.slice(0, start) + emoji + value.slice(end);\r\n            textarea.focus();\r\n            textarea.selectionStart = textarea.selectionEnd = start + emoji.length;\r\n            handleInput();\r\n            setMessage(textarea.value);\r\n            setMainEmojis((prevMainEmojis) => {\r\n                const newList = [emoji, ...prevMainEmojis.filter(e => e !== emoji)];\r\n                const finalList = newList.slice(0, 44);\r\n\r\n                try {\r\n                    localStorage.setItem('mainEmojis', JSON.stringify(finalList));\r\n                } catch (e) {\r\n                    console.error('Failed to save emojis to localStorage:', e);\r\n                }\r\n\r\n                return finalList;\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={handleEmojiClick}>\r\n                {isEmojiPickerOpen ?\r\n                    (<img src={smileySelected} alt=\"emoji\" />) : (<img src={smiley} alt=\"emoji\" />)\r\n                }\r\n            </button>\r\n            {isEmojiPickerOpen && (\r\n                <ModalChatContainer elementRef={emojiPickerRef}>\r\n                    <EmojiPicker onSelect={handleEmojiSelect} mainEmojis={mainEmojis} />\r\n                </ModalChatContainer>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EmojiPickerContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}