{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from 'react';\n// import styles from './CustomAudioPlayer.module.css';\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\n// import play from '../../../assets/images/custom-audio-player/play.png';\n// import AudioTimer from '../audio-recorder/AudioTimer';\n\n// function CustomAudioPlayer({ src }) {\n//     const audioRef = useRef(null);\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [progress, setProgress] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const [currentTime, setCurrentTime] = useState(0);\n\n//     const togglePlay = () => {\n//         const audio = audioRef.current;\n//         if (audio.paused) {\n//             audio.play().then(() => {\n//                 setIsPlaying(true);\n//                 setCurrentTime(audio.currentTime);\n//                 setProgress((audio.currentTime / audio.duration) * 100);\n//             }).catch((err) => {\n//                 console.error(\"Playback failed:\", err);\n//             });\n//         } else {\n//             audio.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n\n//     const handleTimeUpdate = () => {\n//         const audio = audioRef.current;\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\n//             setCurrentTime(audio.currentTime);\n//             setProgress((audio.currentTime / audio.duration) * 100);\n//         } else {\n//             setProgress(0);\n//             setCurrentTime(0);\n//         }\n//     };\n\n//     const handleProgressClick = (e) => {\n//         if (duration <= 0) return;\n\n//         const rect = e.currentTarget.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left;\n//         const newProgress = clickX / rect.width;\n//         const audio = audioRef.current;\n//         audio.currentTime = newProgress * audio.duration;\n//         setProgress(newProgress * 100);\n//         setCurrentTime(audio.currentTime);\n//     };\n\n//     useEffect(() => {\n//         const audio = audioRef.current;\n\n//         const handleLoadedMetadata = () => {\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                 setDuration(audio.duration);\n//             } else {\n//                 audio.currentTime = 1e101;\n//                 audio.ontimeupdate = function () {\n//                     audio.ontimeupdate = null;\n//                     audio.currentTime = 0;\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                         setDuration(audio.duration);\n//                     }\n//                 };\n//             }\n//         };\n\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n//         audio.load();\n\n//         return () => {\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n//         };\n//     }, [src]);\n\n//     return (\n//         <div className={styles.audioPlayer}>\n//             <audio\n//                 ref={audioRef}\n//                 src={src}\n//                 onTimeUpdate={handleTimeUpdate}\n//                 onEnded={() => setIsPlaying(false)}\n//                 preload=\"auto\"\n//             />\n//             <button\n//                 type='button'\n//                 onClick={togglePlay}\n//                 className={styles.playButton}\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n//             >\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\n//             </button>\n//             <div\n//                 className={styles.progressBar}\n//                 onClick={handleProgressClick}\n//                 role=\"progressbar\"\n//                 aria-valuemin={0}\n//                 aria-valuemax={duration}\n//                 aria-valuenow={currentTime}\n//                 tabIndex={0}\n//             >\n//                 <div\n//                     className={styles.progress}\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\n//                 />\n//             </div>\n//             <AudioTimer\n//                 isPaused={!isPlaying}\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\n//                 withDot={false}\n//             />\n//         </div>\n//     );\n// }\n\n// export default CustomAudioPlayer;\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer({\n  audioRef\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const animationId = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    // Очистка если уже есть контекст\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    if (sourceRef.current) {\n      try {\n        sourceRef.current.disconnect();\n      } catch {}\n      sourceRef.current = null;\n    }\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    audioContextRef.current = audioCtx;\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 64;\n    analyserRef.current = analyser;\n    try {\n      sourceRef.current = audioCtx.createMediaElementSource(audioRef.current);\n      sourceRef.current.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    } catch (e) {\n      console.error('Ошибка создания MediaElementSource:', e);\n      return;\n    }\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    function draw() {\n      animationId.current = requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      const barWidth = WIDTH / bufferLength;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        const barHeight = dataArray[i] / 255 * HEIGHT;\n        ctx.fillStyle = '#4A90E2';\n        ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\n        x += barWidth;\n      }\n    }\n    draw();\n    return () => {\n      cancelAnimationFrame(animationId.current);\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n        audioContextRef.current = null;\n      }\n      if (sourceRef.current) {\n        try {\n          sourceRef.current.disconnect();\n        } catch {}\n        sourceRef.current = null;\n      }\n    };\n  }, [audioRef]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 300,\n    height: 50,\n    style: {\n      width: '100%',\n      height: '50px',\n      backgroundColor: '#222'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"2BFrLFN0pBkTkGmop8myGDAa3Xo=\");\n_c = AudioVisualizer;\nexport default function CustomAudioPlayer({\n  src\n}) {\n  _s2();\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const togglePlay = () => {\n    if (!audioRef.current) return;\n    if (audioRef.current.paused) {\n      // Нужно разблокировать AudioContext на user gesture\n      if (audioRef.current.contextState === 'suspended') {\n        audioRef.current.resume();\n      }\n      audioRef.current.play();\n      setIsPlaying(true);\n    } else {\n      audioRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 320,\n      margin: '20px auto',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // разблокируем контекст перед проигрыванием\n        if (audioRef.current) {\n          const context = audioRef.current.context || null;\n          if (context && context.state === 'suspended') {\n            context.resume();\n          }\n        }\n        togglePlay();\n      },\n      style: {\n        margin: '10px',\n        padding: '10px 20px',\n        fontSize: 16\n      },\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AudioVisualizer, {\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 9\n  }, this);\n}\n_s2(CustomAudioPlayer, \"4LVZylOngeaGuZM9rB5Sj0PYDg8=\");\n_c2 = CustomAudioPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioVisualizer\");\n$RefreshReg$(_c2, \"CustomAudioPlayer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","AudioVisualizer","audioRef","_s","canvasRef","animationId","audioContextRef","analyserRef","sourceRef","current","close","disconnect","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","createMediaElementSource","connect","destination","e","console","error","bufferLength","frequencyBinCount","dataArray","Uint8Array","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","x","i","barHeight","fillStyle","fillRect","cancelAnimationFrame","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","CustomAudioPlayer","src","_s2","isPlaying","setIsPlaying","togglePlay","paused","contextState","resume","play","pause","maxWidth","margin","textAlign","children","crossOrigin","onClick","context","state","padding","fontSize","_c2","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\r\n// import styles from './CustomAudioPlayer.module.css';\r\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\r\n// import play from '../../../assets/images/custom-audio-player/play.png';\r\n// import AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\n\r\n// function CustomAudioPlayer({ src }) {\r\n//     const audioRef = useRef(null);\r\n//     const [isPlaying, setIsPlaying] = useState(false);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [duration, setDuration] = useState(0);\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n\r\n//     const togglePlay = () => {\r\n//         const audio = audioRef.current;\r\n//         if (audio.paused) {\r\n//             audio.play().then(() => {\r\n//                 setIsPlaying(true);\r\n//                 setCurrentTime(audio.currentTime);\r\n//                 setProgress((audio.currentTime / audio.duration) * 100);\r\n//             }).catch((err) => {\r\n//                 console.error(\"Playback failed:\", err);\r\n//             });\r\n//         } else {\r\n//             audio.pause();\r\n//             setIsPlaying(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleTimeUpdate = () => {\r\n//         const audio = audioRef.current;\r\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\r\n//             setCurrentTime(audio.currentTime);\r\n//             setProgress((audio.currentTime / audio.duration) * 100);\r\n//         } else {\r\n//             setProgress(0);\r\n//             setCurrentTime(0);\r\n//         }\r\n//     };\r\n\r\n//     const handleProgressClick = (e) => {\r\n//         if (duration <= 0) return;\r\n\r\n//         const rect = e.currentTarget.getBoundingClientRect();\r\n//         const clickX = e.clientX - rect.left;\r\n//         const newProgress = clickX / rect.width;\r\n//         const audio = audioRef.current;\r\n//         audio.currentTime = newProgress * audio.duration;\r\n//         setProgress(newProgress * 100);\r\n//         setCurrentTime(audio.currentTime);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const audio = audioRef.current;\r\n\r\n//         const handleLoadedMetadata = () => {\r\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                 setDuration(audio.duration);\r\n//             } else {\r\n//                 audio.currentTime = 1e101;\r\n//                 audio.ontimeupdate = function () {\r\n//                     audio.ontimeupdate = null;\r\n//                     audio.currentTime = 0;\r\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                         setDuration(audio.duration);\r\n//                     }\r\n//                 };\r\n//             }\r\n//         };\r\n\r\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         audio.load();\r\n\r\n//         return () => {\r\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         };\r\n//     }, [src]);\r\n\r\n\r\n//     return (\r\n//         <div className={styles.audioPlayer}>\r\n//             <audio\r\n//                 ref={audioRef}\r\n//                 src={src}\r\n//                 onTimeUpdate={handleTimeUpdate}\r\n//                 onEnded={() => setIsPlaying(false)}\r\n//                 preload=\"auto\"\r\n//             />\r\n//             <button\r\n//                 type='button'\r\n//                 onClick={togglePlay}\r\n//                 className={styles.playButton}\r\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n//             >\r\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n//             </button>\r\n//             <div\r\n//                 className={styles.progressBar}\r\n//                 onClick={handleProgressClick}\r\n//                 role=\"progressbar\"\r\n//                 aria-valuemin={0}\r\n//                 aria-valuemax={duration}\r\n//                 aria-valuenow={currentTime}\r\n//                 tabIndex={0}\r\n//             >\r\n//                 <div\r\n//                     className={styles.progress}\r\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\r\n//                 />\r\n//             </div>\r\n//             <AudioTimer\r\n//                 isPaused={!isPlaying}\r\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\r\n//                 withDot={false}\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default CustomAudioPlayer;\r\n\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction AudioVisualizer({ audioRef }) {\r\n    const canvasRef = useRef(null);\r\n    const animationId = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const sourceRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!audioRef.current) return;\r\n\r\n        // Очистка если уже есть контекст\r\n        if (audioContextRef.current) {\r\n            audioContextRef.current.close();\r\n            audioContextRef.current = null;\r\n        }\r\n        if (sourceRef.current) {\r\n            try {\r\n                sourceRef.current.disconnect();\r\n            } catch { }\r\n            sourceRef.current = null;\r\n        }\r\n\r\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n        audioContextRef.current = audioCtx;\r\n\r\n        const analyser = audioCtx.createAnalyser();\r\n        analyser.fftSize = 64;\r\n        analyserRef.current = analyser;\r\n\r\n        try {\r\n            sourceRef.current = audioCtx.createMediaElementSource(audioRef.current);\r\n            sourceRef.current.connect(analyser);\r\n            analyser.connect(audioCtx.destination);\r\n        } catch (e) {\r\n            console.error('Ошибка создания MediaElementSource:', e);\r\n            return;\r\n        }\r\n\r\n        const bufferLength = analyser.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        const WIDTH = canvas.width;\r\n        const HEIGHT = canvas.height;\r\n\r\n        function draw() {\r\n            animationId.current = requestAnimationFrame(draw);\r\n\r\n            analyser.getByteFrequencyData(dataArray);\r\n\r\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n            const barWidth = WIDTH / bufferLength;\r\n            let x = 0;\r\n\r\n            for (let i = 0; i < bufferLength; i++) {\r\n                const barHeight = (dataArray[i] / 255) * HEIGHT;\r\n\r\n                ctx.fillStyle = '#4A90E2';\r\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\r\n\r\n                x += barWidth;\r\n            }\r\n        }\r\n\r\n        draw();\r\n\r\n        return () => {\r\n            cancelAnimationFrame(animationId.current);\r\n            if (audioContextRef.current) {\r\n                audioContextRef.current.close();\r\n                audioContextRef.current = null;\r\n            }\r\n            if (sourceRef.current) {\r\n                try {\r\n                    sourceRef.current.disconnect();\r\n                } catch { }\r\n                sourceRef.current = null;\r\n            }\r\n        };\r\n    }, [audioRef]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            width={300}\r\n            height={50}\r\n            style={{ width: '100%', height: '50px', backgroundColor: '#222' }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default function CustomAudioPlayer({ src }) {\r\n    const audioRef = useRef(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const togglePlay = () => {\r\n        if (!audioRef.current) return;\r\n\r\n        if (audioRef.current.paused) {\r\n            // Нужно разблокировать AudioContext на user gesture\r\n            if (audioRef.current.contextState === 'suspended') {\r\n                audioRef.current.resume();\r\n            }\r\n            audioRef.current.play();\r\n            setIsPlaying(true);\r\n        } else {\r\n            audioRef.current.pause();\r\n            setIsPlaying(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ maxWidth: 320, margin: '20px auto', textAlign: 'center' }}>\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                crossOrigin=\"anonymous\"\r\n            />\r\n            <button\r\n                onClick={() => {\r\n                    // разблокируем контекст перед проигрыванием\r\n                    if (audioRef.current) {\r\n                        const context = audioRef.current.context || null;\r\n                        if (context && context.state === 'suspended') {\r\n                            context.resume();\r\n                        }\r\n                    }\r\n                    togglePlay();\r\n                }}\r\n                style={{ margin: '10px', padding: '10px 20px', fontSize: 16 }}\r\n            >\r\n                {isPlaying ? 'Pause' : 'Play'}\r\n            </button>\r\n            <AudioVisualizer audioRef={audioRef} />\r\n        </div>\r\n    );\r\n}\r\n\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,eAAe,GAAGV,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMW,WAAW,GAAGX,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMY,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACK,QAAQ,CAACO,OAAO,EAAE;;IAEvB;IACA,IAAIH,eAAe,CAACG,OAAO,EAAE;MACzBH,eAAe,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;MAC/BJ,eAAe,CAACG,OAAO,GAAG,IAAI;IAClC;IACA,IAAID,SAAS,CAACC,OAAO,EAAE;MACnB,IAAI;QACAD,SAAS,CAACC,OAAO,CAACE,UAAU,CAAC,CAAC;MAClC,CAAC,CAAC,MAAM,CAAE;MACVH,SAAS,CAACC,OAAO,GAAG,IAAI;IAC5B;IAEA,MAAMG,QAAQ,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IACzET,eAAe,CAACG,OAAO,GAAGG,QAAQ;IAElC,MAAMI,QAAQ,GAAGJ,QAAQ,CAACK,cAAc,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,GAAG,EAAE;IACrBX,WAAW,CAACE,OAAO,GAAGO,QAAQ;IAE9B,IAAI;MACAR,SAAS,CAACC,OAAO,GAAGG,QAAQ,CAACO,wBAAwB,CAACjB,QAAQ,CAACO,OAAO,CAAC;MACvED,SAAS,CAACC,OAAO,CAACW,OAAO,CAACJ,QAAQ,CAAC;MACnCA,QAAQ,CAACI,OAAO,CAACR,QAAQ,CAACS,WAAW,CAAC;IAC1C,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,CAAC,CAAC;MACvD;IACJ;IAEA,MAAMG,YAAY,GAAGT,QAAQ,CAACU,iBAAiB;IAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAE9C,MAAMI,MAAM,GAAGzB,SAAS,CAACK,OAAO;IAChC,MAAMqB,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnC,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACM,MAAM;IAE5B,SAASC,IAAIA,CAAA,EAAG;MACZ/B,WAAW,CAACI,OAAO,GAAG4B,qBAAqB,CAACD,IAAI,CAAC;MAEjDpB,QAAQ,CAACsB,oBAAoB,CAACX,SAAS,CAAC;MAExCG,GAAG,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,KAAK,EAAEE,MAAM,CAAC;MAElC,MAAMM,QAAQ,GAAGR,KAAK,GAAGP,YAAY;MACrC,IAAIgB,CAAC,GAAG,CAAC;MAET,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,YAAY,EAAEiB,CAAC,EAAE,EAAE;QACnC,MAAMC,SAAS,GAAIhB,SAAS,CAACe,CAAC,CAAC,GAAG,GAAG,GAAIR,MAAM;QAE/CJ,GAAG,CAACc,SAAS,GAAG,SAAS;QACzBd,GAAG,CAACe,QAAQ,CAACJ,CAAC,EAAEP,MAAM,GAAGS,SAAS,EAAEH,QAAQ,GAAG,GAAG,EAAEG,SAAS,CAAC;QAE9DF,CAAC,IAAID,QAAQ;MACjB;IACJ;IAEAJ,IAAI,CAAC,CAAC;IAEN,OAAO,MAAM;MACTU,oBAAoB,CAACzC,WAAW,CAACI,OAAO,CAAC;MACzC,IAAIH,eAAe,CAACG,OAAO,EAAE;QACzBH,eAAe,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;QAC/BJ,eAAe,CAACG,OAAO,GAAG,IAAI;MAClC;MACA,IAAID,SAAS,CAACC,OAAO,EAAE;QACnB,IAAI;UACAD,SAAS,CAACC,OAAO,CAACE,UAAU,CAAC,CAAC;QAClC,CAAC,CAAC,MAAM,CAAE;QACVH,SAAS,CAACC,OAAO,GAAG,IAAI;MAC5B;IACJ,CAAC;EACL,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,oBACIF,OAAA;IACI+C,GAAG,EAAE3C,SAAU;IACf6B,KAAK,EAAE,GAAI;IACXE,MAAM,EAAE,EAAG;IACXa,KAAK,EAAE;MAAEf,KAAK,EAAE,MAAM;MAAEE,MAAM,EAAE,MAAM;MAAEc,eAAe,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV;AAAClD,EAAA,CA5FQF,eAAe;AAAAqD,EAAA,GAAfrD,eAAe;AA8FxB,eAAe,SAASsD,iBAAiBA,CAAC;EAAEC;AAAI,CAAC,EAAE;EAAAC,GAAA;EAC/C,MAAMvD,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM8D,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAC1D,QAAQ,CAACO,OAAO,EAAE;IAEvB,IAAIP,QAAQ,CAACO,OAAO,CAACoD,MAAM,EAAE;MACzB;MACA,IAAI3D,QAAQ,CAACO,OAAO,CAACqD,YAAY,KAAK,WAAW,EAAE;QAC/C5D,QAAQ,CAACO,OAAO,CAACsD,MAAM,CAAC,CAAC;MAC7B;MACA7D,QAAQ,CAACO,OAAO,CAACuD,IAAI,CAAC,CAAC;MACvBL,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,MAAM;MACHzD,QAAQ,CAACO,OAAO,CAACwD,KAAK,CAAC,CAAC;MACxBN,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACI3D,OAAA;IAAKgD,KAAK,EAAE;MAAEkB,QAAQ,EAAE,GAAG;MAAEC,MAAM,EAAE,WAAW;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACpErE,OAAA;MACI+C,GAAG,EAAE7C,QAAS;MACdsD,GAAG,EAAEA,GAAI;MACTc,WAAW,EAAC;IAAW;MAAApB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACFrD,OAAA;MACIuE,OAAO,EAAEA,CAAA,KAAM;QACX;QACA,IAAIrE,QAAQ,CAACO,OAAO,EAAE;UAClB,MAAM+D,OAAO,GAAGtE,QAAQ,CAACO,OAAO,CAAC+D,OAAO,IAAI,IAAI;UAChD,IAAIA,OAAO,IAAIA,OAAO,CAACC,KAAK,KAAK,WAAW,EAAE;YAC1CD,OAAO,CAACT,MAAM,CAAC,CAAC;UACpB;QACJ;QACAH,UAAU,CAAC,CAAC;MAChB,CAAE;MACFZ,KAAK,EAAE;QAAEmB,MAAM,EAAE,MAAM;QAAEO,OAAO,EAAE,WAAW;QAAEC,QAAQ,EAAE;MAAG,CAAE;MAAAN,QAAA,EAE7DX,SAAS,GAAG,OAAO,GAAG;IAAM;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACTrD,OAAA,CAACC,eAAe;MAACC,QAAQ,EAAEA;IAAS;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEd;AAACI,GAAA,CA7CuBF,iBAAiB;AAAAqB,GAAA,GAAjBrB,iBAAiB;AAAA,IAAAD,EAAA,EAAAsB,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}