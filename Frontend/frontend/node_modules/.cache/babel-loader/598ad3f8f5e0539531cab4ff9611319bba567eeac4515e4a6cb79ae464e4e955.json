{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from 'react';\n// import styles from './CustomAudioPlayer.module.css';\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\n// import play from '../../../assets/images/custom-audio-player/play.png';\n// import AudioTimer from '../audio-recorder/AudioTimer';\n\n// function CustomAudioPlayer({ src }) {\n//     const audioRef = useRef(null);\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [progress, setProgress] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const [currentTime, setCurrentTime] = useState(0);\n\n//     const togglePlay = () => {\n//         const audio = audioRef.current;\n//         if (audio.paused) {\n//             audio.play().then(() => {\n//                 setIsPlaying(true);\n//                 setCurrentTime(audio.currentTime);\n//                 setProgress((audio.currentTime / audio.duration) * 100);\n//             }).catch((err) => {\n//                 console.error(\"Playback failed:\", err);\n//             });\n//         } else {\n//             audio.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n\n//     const handleTimeUpdate = () => {\n//         const audio = audioRef.current;\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\n//             setCurrentTime(audio.currentTime);\n//             setProgress((audio.currentTime / audio.duration) * 100);\n//         } else {\n//             setProgress(0);\n//             setCurrentTime(0);\n//         }\n//     };\n\n//     const handleProgressClick = (e) => {\n//         if (duration <= 0) return;\n\n//         const rect = e.currentTarget.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left;\n//         const newProgress = clickX / rect.width;\n//         const audio = audioRef.current;\n//         audio.currentTime = newProgress * audio.duration;\n//         setProgress(newProgress * 100);\n//         setCurrentTime(audio.currentTime);\n//     };\n\n//     useEffect(() => {\n//         const audio = audioRef.current;\n\n//         const handleLoadedMetadata = () => {\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                 setDuration(audio.duration);\n//             } else {\n//                 audio.currentTime = 1e101;\n//                 audio.ontimeupdate = function () {\n//                     audio.ontimeupdate = null;\n//                     audio.currentTime = 0;\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                         setDuration(audio.duration);\n//                     }\n//                 };\n//             }\n//         };\n\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n//         audio.load();\n\n//         return () => {\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n//         };\n//     }, [src]);\n\n//     return (\n//         <div className={styles.audioPlayer}>\n//             <audio\n//                 ref={audioRef}\n//                 src={src}\n//                 onTimeUpdate={handleTimeUpdate}\n//                 onEnded={() => setIsPlaying(false)}\n//                 preload=\"auto\"\n//             />\n//             <button\n//                 type='button'\n//                 onClick={togglePlay}\n//                 className={styles.playButton}\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n//             >\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\n//             </button>\n//             <div\n//                 className={styles.progressBar}\n//                 onClick={handleProgressClick}\n//                 role=\"progressbar\"\n//                 aria-valuemin={0}\n//                 aria-valuemax={duration}\n//                 aria-valuenow={currentTime}\n//                 tabIndex={0}\n//             >\n//                 <div\n//                     className={styles.progress}\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\n//                 />\n//             </div>\n//             <AudioTimer\n//                 isPaused={!isPlaying}\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\n//                 withDot={false}\n//             />\n//         </div>\n//     );\n// }\n\n// export default CustomAudioPlayer;\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer({\n  audioRef\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const animationId = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const sourceRef = useRef(null);\n  useEffect(() => {\n    if (!audioRef.current) return;\n\n    // Создаем AudioContext\n    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    const audioCtx = audioContextRef.current;\n\n    // Создаем анализатор частот\n    analyserRef.current = audioCtx.createAnalyser();\n    analyserRef.current.fftSize = 64; // Можно увеличить для более точного анализа\n\n    // Создаем источник аудио из audioRef, но осторожно, чтобы не создавать его дважды\n    if (!sourceRef.current) {\n      try {\n        sourceRef.current = audioCtx.createMediaElementSource(audioRef.current);\n        sourceRef.current.connect(analyserRef.current);\n        analyserRef.current.connect(audioCtx.destination);\n      } catch (e) {\n        // Если source уже был создан для этого audioRef - ловим ошибку\n        console.warn('MediaElementSource уже создан для этого audio', e);\n      }\n    }\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    function draw() {\n      animationId.current = requestAnimationFrame(draw);\n      analyserRef.current.getByteFrequencyData(dataArray);\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      const barWidth = WIDTH / bufferLength;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        const barHeight = dataArray[i] / 255 * HEIGHT;\n        ctx.fillStyle = '#4A90E2';\n        ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\n        x += barWidth;\n      }\n    }\n    draw();\n    return () => {\n      cancelAnimationFrame(animationId.current);\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n      sourceRef.current = null;\n    };\n  }, [audioRef]);\n  useEffect(() => {\n    const audio = audioRef.current;\n    const handleLoadedMetadata = () => {\n      if (!isNaN(audio.duration) && audio.duration !== Infinity) {} else {\n        audio.currentTime = 1e101;\n        audio.ontimeupdate = function () {\n          audio.ontimeupdate = null;\n          audio.currentTime = 0;\n        };\n      }\n    };\n    audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n    audio.load();\n    return () => {\n      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 300,\n    height: 50,\n    style: {\n      width: '100%',\n      height: '50px',\n      backgroundColor: '#222'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"XoRaGlSbr1+mx0HCgf4HQ889EcA=\");\n_c = AudioVisualizer;\nexport default function CustomAudioPlayer({\n  src\n}) {\n  _s2();\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const togglePlay = () => {\n    if (!audioRef.current) return;\n    if (audioRef.current.paused) {\n      // Важно: чтобы AudioContext запустился, иногда нужна user gesture\n      audioRef.current.play().then(() => setIsPlaying(true)).catch(console.error);\n    } else {\n      audioRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n  const onTimeUpdate = () => {\n    if (!audioRef.current) return;\n    setCurrentTime(audioRef.current.currentTime);\n  };\n  const onLoadedMetadata = () => {\n    if (!audioRef.current) return;\n    setDuration(audioRef.current.duration);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 400,\n      margin: '20px auto',\n      color: 'white',\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onTimeUpdate: onTimeUpdate,\n      onLoadedMetadata: onLoadedMetadata,\n      onEnded: () => setIsPlaying(false),\n      preload: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      style: {\n        marginBottom: 10\n      },\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AudioVisualizer, {\n      audioRef: audioRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Math.floor(currentTime), \" / \", Math.floor(duration), \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 9\n  }, this);\n}\n_s2(CustomAudioPlayer, \"6FPfzDN5iO0Wq/negSO1oGTGA+M=\");\n_c2 = CustomAudioPlayer;\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioVisualizer\");\n$RefreshReg$(_c2, \"CustomAudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","AudioVisualizer","audioRef","_s","canvasRef","animationId","audioContextRef","analyserRef","sourceRef","current","window","AudioContext","webkitAudioContext","audioCtx","createAnalyser","fftSize","createMediaElementSource","connect","destination","e","console","warn","bufferLength","frequencyBinCount","dataArray","Uint8Array","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","x","i","barHeight","fillStyle","fillRect","cancelAnimationFrame","close","audio","handleLoadedMetadata","isNaN","duration","Infinity","currentTime","ontimeupdate","addEventListener","load","removeEventListener","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","CustomAudioPlayer","src","_s2","isPlaying","setIsPlaying","setDuration","setCurrentTime","togglePlay","paused","play","then","catch","error","pause","onTimeUpdate","onLoadedMetadata","maxWidth","margin","color","fontFamily","children","onEnded","preload","onClick","marginBottom","Math","floor","_c2","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\r\n// import styles from './CustomAudioPlayer.module.css';\r\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\r\n// import play from '../../../assets/images/custom-audio-player/play.png';\r\n// import AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\n\r\n// function CustomAudioPlayer({ src }) {\r\n//     const audioRef = useRef(null);\r\n//     const [isPlaying, setIsPlaying] = useState(false);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [duration, setDuration] = useState(0);\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n\r\n//     const togglePlay = () => {\r\n//         const audio = audioRef.current;\r\n//         if (audio.paused) {\r\n//             audio.play().then(() => {\r\n//                 setIsPlaying(true);\r\n//                 setCurrentTime(audio.currentTime);\r\n//                 setProgress((audio.currentTime / audio.duration) * 100);\r\n//             }).catch((err) => {\r\n//                 console.error(\"Playback failed:\", err);\r\n//             });\r\n//         } else {\r\n//             audio.pause();\r\n//             setIsPlaying(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleTimeUpdate = () => {\r\n//         const audio = audioRef.current;\r\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\r\n//             setCurrentTime(audio.currentTime);\r\n//             setProgress((audio.currentTime / audio.duration) * 100);\r\n//         } else {\r\n//             setProgress(0);\r\n//             setCurrentTime(0);\r\n//         }\r\n//     };\r\n\r\n//     const handleProgressClick = (e) => {\r\n//         if (duration <= 0) return;\r\n\r\n//         const rect = e.currentTarget.getBoundingClientRect();\r\n//         const clickX = e.clientX - rect.left;\r\n//         const newProgress = clickX / rect.width;\r\n//         const audio = audioRef.current;\r\n//         audio.currentTime = newProgress * audio.duration;\r\n//         setProgress(newProgress * 100);\r\n//         setCurrentTime(audio.currentTime);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const audio = audioRef.current;\r\n\r\n//         const handleLoadedMetadata = () => {\r\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                 setDuration(audio.duration);\r\n//             } else {\r\n//                 audio.currentTime = 1e101;\r\n//                 audio.ontimeupdate = function () {\r\n//                     audio.ontimeupdate = null;\r\n//                     audio.currentTime = 0;\r\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                         setDuration(audio.duration);\r\n//                     }\r\n//                 };\r\n//             }\r\n//         };\r\n\r\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         audio.load();\r\n\r\n//         return () => {\r\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         };\r\n//     }, [src]);\r\n\r\n\r\n//     return (\r\n//         <div className={styles.audioPlayer}>\r\n//             <audio\r\n//                 ref={audioRef}\r\n//                 src={src}\r\n//                 onTimeUpdate={handleTimeUpdate}\r\n//                 onEnded={() => setIsPlaying(false)}\r\n//                 preload=\"auto\"\r\n//             />\r\n//             <button\r\n//                 type='button'\r\n//                 onClick={togglePlay}\r\n//                 className={styles.playButton}\r\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n//             >\r\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n//             </button>\r\n//             <div\r\n//                 className={styles.progressBar}\r\n//                 onClick={handleProgressClick}\r\n//                 role=\"progressbar\"\r\n//                 aria-valuemin={0}\r\n//                 aria-valuemax={duration}\r\n//                 aria-valuenow={currentTime}\r\n//                 tabIndex={0}\r\n//             >\r\n//                 <div\r\n//                     className={styles.progress}\r\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\r\n//                 />\r\n//             </div>\r\n//             <AudioTimer\r\n//                 isPaused={!isPlaying}\r\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\r\n//                 withDot={false}\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default CustomAudioPlayer;\r\n\r\n\r\nimport React, { useRef, useState, useEffect } from 'react';\r\n\r\nfunction AudioVisualizer({ audioRef }) {\r\n    const canvasRef = useRef(null);\r\n    const animationId = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const sourceRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!audioRef.current) return;\r\n\r\n        // Создаем AudioContext\r\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n        const audioCtx = audioContextRef.current;\r\n\r\n        // Создаем анализатор частот\r\n        analyserRef.current = audioCtx.createAnalyser();\r\n        analyserRef.current.fftSize = 64; // Можно увеличить для более точного анализа\r\n\r\n        // Создаем источник аудио из audioRef, но осторожно, чтобы не создавать его дважды\r\n        if (!sourceRef.current) {\r\n            try {\r\n                sourceRef.current = audioCtx.createMediaElementSource(audioRef.current);\r\n                sourceRef.current.connect(analyserRef.current);\r\n                analyserRef.current.connect(audioCtx.destination);\r\n            } catch (e) {\r\n                // Если source уже был создан для этого audioRef - ловим ошибку\r\n                console.warn('MediaElementSource уже создан для этого audio', e);\r\n            }\r\n        }\r\n\r\n        const bufferLength = analyserRef.current.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        const WIDTH = canvas.width;\r\n        const HEIGHT = canvas.height;\r\n\r\n        function draw() {\r\n            animationId.current = requestAnimationFrame(draw);\r\n\r\n            analyserRef.current.getByteFrequencyData(dataArray);\r\n\r\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n            const barWidth = WIDTH / bufferLength;\r\n            let x = 0;\r\n\r\n            for (let i = 0; i < bufferLength; i++) {\r\n                const barHeight = (dataArray[i] / 255) * HEIGHT;\r\n\r\n                ctx.fillStyle = '#4A90E2';\r\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\r\n\r\n                x += barWidth;\r\n            }\r\n        }\r\n\r\n        draw();\r\n\r\n        return () => {\r\n            cancelAnimationFrame(animationId.current);\r\n            if (audioContextRef.current) {\r\n                audioContextRef.current.close();\r\n            }\r\n            sourceRef.current = null;\r\n        };\r\n    }, [audioRef]);\r\n\r\n    useEffect(() => {\r\n        const audio = audioRef.current;\r\n\r\n        const handleLoadedMetadata = () => {\r\n            if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n            } else {\r\n                audio.currentTime = 1e101;\r\n                audio.ontimeupdate = function () {\r\n                    audio.ontimeupdate = null;\r\n                    audio.currentTime = 0;\r\n                };\r\n            }\r\n        };\r\n\r\n        audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n        audio.load();\r\n\r\n        return () => {\r\n            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            width={300}\r\n            height={50}\r\n            style={{ width: '100%', height: '50px', backgroundColor: '#222' }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default function CustomAudioPlayer({ src }) {\r\n    const audioRef = useRef(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    const togglePlay = () => {\r\n        if (!audioRef.current) return;\r\n\r\n        if (audioRef.current.paused) {\r\n            // Важно: чтобы AudioContext запустился, иногда нужна user gesture\r\n            audioRef.current.play().then(() => setIsPlaying(true)).catch(console.error);\r\n        } else {\r\n            audioRef.current.pause();\r\n            setIsPlaying(false);\r\n        }\r\n    };\r\n\r\n    const onTimeUpdate = () => {\r\n        if (!audioRef.current) return;\r\n        setCurrentTime(audioRef.current.currentTime);\r\n    };\r\n\r\n    const onLoadedMetadata = () => {\r\n        if (!audioRef.current) return;\r\n        setDuration(audioRef.current.duration);\r\n    };\r\n\r\n    return (\r\n        <div style={{ maxWidth: 400, margin: '20px auto', color: 'white', fontFamily: 'sans-serif' }}>\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                onTimeUpdate={onTimeUpdate}\r\n                onLoadedMetadata={onLoadedMetadata}\r\n                onEnded={() => setIsPlaying(false)}\r\n                preload=\"auto\"\r\n            />\r\n            <button onClick={togglePlay} style={{ marginBottom: 10 }}>\r\n                {isPlaying ? 'Pause' : 'Play'}\r\n            </button>\r\n            <AudioVisualizer audioRef={audioRef} />\r\n            <div>\r\n                {Math.floor(currentTime)} / {Math.floor(duration)} seconds\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,eAAe,GAAGV,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMW,WAAW,GAAGX,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMY,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE9BE,SAAS,CAAC,MAAM;IACZ,IAAI,CAACI,QAAQ,CAACO,OAAO,EAAE;;IAEvB;IACAH,eAAe,CAACG,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAClF,MAAMC,QAAQ,GAAGP,eAAe,CAACG,OAAO;;IAExC;IACAF,WAAW,CAACE,OAAO,GAAGI,QAAQ,CAACC,cAAc,CAAC,CAAC;IAC/CP,WAAW,CAACE,OAAO,CAACM,OAAO,GAAG,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}