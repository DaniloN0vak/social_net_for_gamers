{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\message-input\\\\MessageInput.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useRef, useState, useEffect } from \"react\";\nimport styles from './MessageInput.module.css';\nimport smiley from '../../../assets/images/message-form/smiley.png';\nimport gifImg from '../../../assets/images/message-form/gif.png';\nimport arrow from '../../../assets/images/message-form/arrow.png';\nimport microfon from '../../../assets/images/message-form/microfon.png';\nimport smileySelected from '../../../assets/images/message-form/smiley-selected.png';\nimport gifImgSelected from '../../../assets/images/message-form/gif-selected.png';\nimport arrowSelected from '../../../assets/images/message-form/arrow-selected.png';\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\nimport cross from '../../../assets/images/message-form/cross.png';\nimport GifPicker from '../../shared/gif-picker/GifPicker';\nimport EmojiPicker from '../../shared/emoji-picker/EmojiPicker';\nimport ModalChatContainer from '../modal-chat-container/ModalChatContainer';\nimport useOutsideClick from \"../modal-chat-container/useOutsideClick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageInput({\n  messageControl,\n  mediaControl,\n  gifControl,\n  audioRecordingControl\n}) {\n  _s();\n  const [isEmojiPickerOpen, setIsEmojiPickerOpen] = useState(false);\n  const emojiPickerRef = useRef(null);\n  const [isGifPanelOpen, setIsGifPanelOpen] = useState(false);\n  const gifPanelRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const {\n    mediaList,\n    setMediaList\n  } = mediaControl;\n  const {\n    message,\n    setMessage\n  } = messageControl;\n  const {\n    gif,\n    setGif\n  } = gifControl;\n  const {\n    audioChunks,\n    setAudioChunks\n  } = audioRecordingControl;\n  useOutsideClick(emojiPickerRef, () => setIsEmojiPickerOpen(false), isEmojiPickerOpen);\n  useOutsideClick(gifPanelRef, () => setIsGifPanelOpen(false), isGifPanelOpen);\n  const fileInputRef = useRef(null);\n  const handleAudioClick = async () => {\n    if (!isRecording) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        const chunks = [];\n        recorder.ondataavailable = e => {\n          if (e.data.size > 0) chunks.push(e.data);\n        };\n        recorder.onstop = () => {\n          const audioBlob = new Blob(chunks, {\n            type: 'audio/webm'\n          });\n          const audioUrl = URL.createObjectURL(audioBlob);\n          const newAudio = {\n            id: `${Date.now()}_audio`,\n            type: 'audio',\n            src: audioUrl,\n            file: audioBlob\n          };\n          setMediaList(prev => [...prev, newAudio]);\n        };\n        recorder.start();\n        setMediaRecorder(recorder);\n        setAudioChunks(chunks);\n        setIsRecording(true);\n      } catch (err) {\n        console.error('Ошибка при доступе к микрофону', err);\n      }\n    } else {\n      mediaRecorder === null || mediaRecorder === void 0 ? void 0 : mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  // const handleRemoveMedia = (media) => {\n  //     if (media.type === 'selected_gif') {\n  //         setGifList((prev) => prev.filter((gif) => gif.id !== media.id));\n  //     }\n  //     else {\n  //         setMediaList((prev) => prev.filter((content) => content.id !== media.id));\n  //     }\n  // };\n  const handleEmojiClick = () => {\n    setIsEmojiPickerOpen(prev => !prev);\n  };\n  const handleEmojiSelect = emoji => {\n    if (textareaRef.current) {\n      const textarea = textareaRef.current;\n      const start = textarea.selectionStart;\n      const end = textarea.selectionEnd;\n      const value = textarea.value;\n      textarea.value = value.slice(0, start) + emoji + value.slice(end);\n      textarea.focus();\n      textarea.selectionStart = textarea.selectionEnd = start + emoji.length;\n      handleInput();\n      setMessage(textarea.value);\n      setMainEmojis(prevMainEmojis => {\n        const newList = [emoji, ...prevMainEmojis.filter(e => e !== emoji)];\n        const finalList = newList.slice(0, 44);\n        try {\n          localStorage.setItem('mainEmojis', JSON.stringify(finalList));\n        } catch (e) {\n          console.error('Failed to save emojis to localStorage:', e);\n        }\n        return finalList;\n      });\n    }\n  };\n  const textareaRef = useRef(null);\n  // const handleGifSelect = (gifUrl) => {\n  //     if (gifList.length < 11) {\n\n  //         const newGif = {\n  //             id: (`${Date.now()}_gif`),\n  //             type: 'selected_gif',\n  //             src: gifUrl\n  //         };\n  //         setGifList((prev) => [...prev, newGif]);\n  //         setIsGifPanelOpen(false);\n  //     }\n  // };\n  const handleInput = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      textarea.style.height = textarea.scrollHeight + 'px';\n    }\n  };\n  const handleImageUpload = event => {\n    if (mediaList.length < 11) {\n      const files = Array.from(event.target.files);\n      const newMedia = files.map((file, index) => ({\n        id: `${Date.now()}_${index}`,\n        type: file.type.startsWith('video') ? 'video' : 'image',\n        src: URL.createObjectURL(file),\n        file\n      }));\n      setMediaList(prev => [...prev, ...newMedia]);\n    }\n  };\n  const [mainEmojis, setMainEmojis] = useState(() => {\n    try {\n      const saved = localStorage.getItem('mainEmojis');\n      return saved ? JSON.parse(saved) : [];\n    } catch (e) {\n      console.error('Failed to load emojis from localStorage:', e);\n      return [];\n    }\n  });\n\n  // const handleGifClick = () => {\n  //     setIsGifPanelOpen((prev) => !prev);\n  //     setIsEmojiPickerOpen(false);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    name: \"messageInput\",\n    className: styles.messageForm,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      name: \"message\",\n      className: styles.messageInput,\n      autoComplete: \"off\",\n      placeholder: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0456\\u0442\\u044C \\u0432\\u0430\\u0448\\u0435 \\u043F\\u043E\\u0432\\u0456\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u043D\\u044F\",\n      onInput: handleInput,\n      rows: 1,\n      onChange: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messageImages,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleEmojiClick,\n        children: isEmojiPickerOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: smileySelected,\n          alt: \"emoji\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: smiley,\n          alt: \"emoji\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 67\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), isEmojiPickerOpen && /*#__PURE__*/_jsxDEV(ModalChatContainer, {\n        elementRef: emojiPickerRef,\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          onSelect: handleEmojiSelect,\n          mainEmojis: mainEmojis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), isGifPanelOpen && /*#__PURE__*/_jsxDEV(ModalChatContainer, {\n        elementRef: gifPanelRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          var _fileInputRef$current;\n          return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: cross,\n          alt: \"attach media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*,video/*\",\n        multiple: true,\n        ref: fileInputRef,\n        style: {\n          display: 'none'\n        },\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAudioClick,\n        children: isRecording ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: microfonSelected,\n          alt: \"audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: microfon,\n          alt: \"audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 80\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: arrow,\n          alt: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 13\n  }, this);\n}\n_s(MessageInput, \"hrTA8zZsA0KGoNsyBZfa83mGopI=\", false, function () {\n  return [useOutsideClick, useOutsideClick];\n});\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useRef","useState","useEffect","styles","smiley","gifImg","arrow","microfon","smileySelected","gifImgSelected","arrowSelected","microfonSelected","cross","GifPicker","EmojiPicker","ModalChatContainer","useOutsideClick","jsxDEV","_jsxDEV","MessageInput","messageControl","mediaControl","gifControl","audioRecordingControl","_s","isEmojiPickerOpen","setIsEmojiPickerOpen","emojiPickerRef","isGifPanelOpen","setIsGifPanelOpen","gifPanelRef","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","mediaList","setMediaList","message","setMessage","gif","setGif","audioChunks","setAudioChunks","fileInputRef","handleAudioClick","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","e","data","size","push","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","newAudio","id","Date","now","src","file","prev","start","err","console","error","stop","handleEmojiClick","handleEmojiSelect","emoji","textareaRef","current","textarea","selectionStart","end","selectionEnd","value","slice","focus","length","handleInput","setMainEmojis","prevMainEmojis","newList","filter","finalList","localStorage","setItem","JSON","stringify","style","height","scrollHeight","handleImageUpload","event","files","Array","from","target","newMedia","map","index","startsWith","mainEmojis","saved","getItem","parse","name","className","messageForm","children","ref","messageInput","autoComplete","placeholder","onInput","rows","onChange","fileName","_jsxFileName","lineNumber","columnNumber","messageImages","onClick","alt","elementRef","onSelect","_fileInputRef$current","click","accept","multiple","display","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/message-input/MessageInput.js"],"sourcesContent":["import React from \"react\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport styles from './MessageInput.module.css';\r\nimport smiley from '../../../assets/images/message-form/smiley.png';\r\nimport gifImg from '../../../assets/images/message-form/gif.png';\r\nimport arrow from '../../../assets/images/message-form/arrow.png';\r\nimport microfon from '../../../assets/images/message-form/microfon.png';\r\nimport smileySelected from '../../../assets/images/message-form/smiley-selected.png';\r\nimport gifImgSelected from '../../../assets/images/message-form/gif-selected.png';\r\nimport arrowSelected from '../../../assets/images/message-form/arrow-selected.png';\r\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\r\nimport cross from '../../../assets/images/message-form/cross.png';\r\nimport GifPicker from '../../shared/gif-picker/GifPicker';\r\nimport EmojiPicker from '../../shared/emoji-picker/EmojiPicker';\r\nimport ModalChatContainer from '../modal-chat-container/ModalChatContainer';\r\nimport useOutsideClick from \"../modal-chat-container/useOutsideClick\";\r\n\r\nfunction MessageInput({ messageControl, mediaControl, gifControl, audioRecordingControl }) {\r\n    const [isEmojiPickerOpen, setIsEmojiPickerOpen] = useState(false);\r\n    const emojiPickerRef = useRef(null);\r\n    const [isGifPanelOpen, setIsGifPanelOpen] = useState(false);\r\n    const gifPanelRef = useRef(null);\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const { mediaList, setMediaList } = mediaControl;\r\n    const { message, setMessage } = messageControl;\r\n    const { gif, setGif } = gifControl;\r\n    const { audioChunks, setAudioChunks } = audioRecordingControl;\r\n    useOutsideClick(emojiPickerRef, () => setIsEmojiPickerOpen(false), isEmojiPickerOpen);\r\n    useOutsideClick(gifPanelRef, () => setIsGifPanelOpen(false), isGifPanelOpen);\r\n    const fileInputRef = useRef(null);\r\n    const handleAudioClick = async () => {\r\n        if (!isRecording) {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                const recorder = new MediaRecorder(stream);\r\n                const chunks = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    if (e.data.size > 0) chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = () => {\r\n                    const audioBlob = new Blob(chunks, { type: 'audio/webm' });\r\n                    const audioUrl = URL.createObjectURL(audioBlob);\r\n\r\n                    const newAudio = {\r\n                        id: `${Date.now()}_audio`,\r\n                        type: 'audio',\r\n                        src: audioUrl,\r\n                        file: audioBlob\r\n                    };\r\n                    setMediaList(prev => [...prev, newAudio]);\r\n                };\r\n\r\n                recorder.start();\r\n                setMediaRecorder(recorder);\r\n                setAudioChunks(chunks);\r\n                setIsRecording(true);\r\n            } catch (err) {\r\n                console.error('Ошибка при доступе к микрофону', err);\r\n            }\r\n        } else {\r\n            mediaRecorder?.stop();\r\n            setIsRecording(false);\r\n        }\r\n    };\r\n    // const handleRemoveMedia = (media) => {\r\n    //     if (media.type === 'selected_gif') {\r\n    //         setGifList((prev) => prev.filter((gif) => gif.id !== media.id));\r\n    //     }\r\n    //     else {\r\n    //         setMediaList((prev) => prev.filter((content) => content.id !== media.id));\r\n    //     }\r\n    // };\r\n    const handleEmojiClick = () => {\r\n        setIsEmojiPickerOpen((prev) => !prev);\r\n    };\r\n    const handleEmojiSelect = (emoji) => {\r\n        if (textareaRef.current) {\r\n            const textarea = textareaRef.current;\r\n            const start = textarea.selectionStart;\r\n            const end = textarea.selectionEnd;\r\n            const value = textarea.value;\r\n            textarea.value = value.slice(0, start) + emoji + value.slice(end);\r\n            textarea.focus();\r\n            textarea.selectionStart = textarea.selectionEnd = start + emoji.length;\r\n            handleInput();\r\n            setMessage(textarea.value);\r\n            setMainEmojis((prevMainEmojis) => {\r\n                const newList = [emoji, ...prevMainEmojis.filter(e => e !== emoji)];\r\n                const finalList = newList.slice(0, 44);\r\n\r\n                try {\r\n                    localStorage.setItem('mainEmojis', JSON.stringify(finalList));\r\n                } catch (e) {\r\n                    console.error('Failed to save emojis to localStorage:', e);\r\n                }\r\n\r\n                return finalList;\r\n            });\r\n        }\r\n    };\r\n    const textareaRef = useRef(null);\r\n    // const handleGifSelect = (gifUrl) => {\r\n    //     if (gifList.length < 11) {\r\n\r\n    //         const newGif = {\r\n    //             id: (`${Date.now()}_gif`),\r\n    //             type: 'selected_gif',\r\n    //             src: gifUrl\r\n    //         };\r\n    //         setGifList((prev) => [...prev, newGif]);\r\n    //         setIsGifPanelOpen(false);\r\n    //     }\r\n    // };\r\n    const handleInput = () => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = 'auto';\r\n            textarea.style.height = textarea.scrollHeight + 'px';\r\n        }\r\n    };\r\n\r\n    const handleImageUpload = (event) => {\r\n        if (mediaList.length < 11) {\r\n            const files = Array.from(event.target.files);\r\n            const newMedia = files.map((file, index) => ({\r\n                id: `${Date.now()}_${index}`,\r\n                type: file.type.startsWith('video') ? 'video' : 'image',\r\n                src: URL.createObjectURL(file),\r\n                file\r\n            }));\r\n            setMediaList((prev) => [...prev, ...newMedia]);\r\n        }\r\n    };\r\n    const [mainEmojis, setMainEmojis] = useState(() => {\r\n        try {\r\n            const saved = localStorage.getItem('mainEmojis');\r\n            return saved ? JSON.parse(saved) : [];\r\n        } catch (e) {\r\n            console.error('Failed to load emojis from localStorage:', e);\r\n            return [];\r\n        }\r\n    });\r\n\r\n    // const handleGifClick = () => {\r\n    //     setIsGifPanelOpen((prev) => !prev);\r\n    //     setIsEmojiPickerOpen(false);\r\n    // };\r\n\r\n    return (<form name=\"messageInput\" className={styles.messageForm}>\r\n        <textarea\r\n            ref={textareaRef}\r\n            name=\"message\"\r\n            className={styles.messageInput}\r\n            autoComplete=\"off\"\r\n            placeholder=\"Напишіть ваше повідомлення\"\r\n            onInput={handleInput}\r\n            rows={1}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n        <div className={styles.messageImages}>\r\n            <button type=\"button\" onClick={handleEmojiClick}>\r\n                {isEmojiPickerOpen ?\r\n                    (<img src={smileySelected} alt=\"emoji\" />) : (<img src={smiley} alt=\"emoji\" />)\r\n                }\r\n            </button>\r\n            {isEmojiPickerOpen && (\r\n                <ModalChatContainer elementRef={emojiPickerRef}>\r\n                    <EmojiPicker onSelect={handleEmojiSelect} mainEmojis={mainEmojis} />\r\n                </ModalChatContainer>\r\n            )}\r\n            {/* <button type=\"button\" onClick={handleGifClick}>\r\n                {isGifPanelOpen ? (\r\n                    <img src={gifImgSelected} alt=\"gif\" />\r\n                ) : <img src={gifImg} alt=\"gif\" />}\r\n            </button> */}\r\n\r\n            {isGifPanelOpen && (\r\n                <ModalChatContainer elementRef={gifPanelRef}>\r\n                    {/* <GifPicker onSelect={handleGifSelect} setIsGifPanelOpen={setIsGifPanelOpen} /> */}\r\n                </ModalChatContainer>\r\n            )}\r\n\r\n            <button type=\"button\" onClick={() => fileInputRef.current?.click()}>\r\n                <img src={cross} alt=\"attach media\" />\r\n            </button>\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*,video/*\"\r\n                multiple\r\n                ref={fileInputRef}\r\n                style={{ display: 'none' }}\r\n                onChange={handleImageUpload}\r\n            />\r\n            <button type=\"button\" onClick={handleAudioClick}>\r\n                {isRecording ? (<img src={microfonSelected} alt=\"audio\" />) : (<img src={microfon} alt=\"audio\" />)}\r\n            </button>\r\n\r\n            <button type=\"submit\"><img src={arrow} alt=\"send\" /></button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default MessageInput;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,MAAM,MAAM,gDAAgD;AACnE,OAAOC,MAAM,MAAM,6CAA6C;AAChE,OAAOC,KAAK,MAAM,+CAA+C;AACjE,OAAOC,QAAQ,MAAM,kDAAkD;AACvE,OAAOC,cAAc,MAAM,yDAAyD;AACpF,OAAOC,cAAc,MAAM,sDAAsD;AACjF,OAAOC,aAAa,MAAM,wDAAwD;AAClF,OAAOC,gBAAgB,MAAM,2DAA2D;AACxF,OAAOC,KAAK,MAAM,+CAA+C;AACjE,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,kBAAkB,MAAM,4CAA4C;AAC3E,OAAOC,eAAe,MAAM,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,YAAYA,CAAC;EAAEC,cAAc;EAAEC,YAAY;EAAEC,UAAU;EAAEC;AAAsB,CAAC,EAAE;EAAAC,EAAA;EACvF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM0B,cAAc,GAAG3B,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM6B,WAAW,GAAG9B,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgC,aAAa,EAAEC,gBAAgB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM;IAAEkC,SAAS;IAAEC;EAAa,CAAC,GAAGf,YAAY;EAChD,MAAM;IAAEgB,OAAO;IAAEC;EAAW,CAAC,GAAGlB,cAAc;EAC9C,MAAM;IAAEmB,GAAG;IAAEC;EAAO,CAAC,GAAGlB,UAAU;EAClC,MAAM;IAAEmB,WAAW;IAAEC;EAAe,CAAC,GAAGnB,qBAAqB;EAC7DP,eAAe,CAACW,cAAc,EAAE,MAAMD,oBAAoB,CAAC,KAAK,CAAC,EAAED,iBAAiB,CAAC;EACrFT,eAAe,CAACc,WAAW,EAAE,MAAMD,iBAAiB,CAAC,KAAK,CAAC,EAAED,cAAc,CAAC;EAC5E,MAAMe,YAAY,GAAG3C,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM4C,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACb,WAAW,EAAE;MACd,IAAI;QACA,MAAMc,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACzE,MAAMC,QAAQ,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;QAC1C,MAAMO,MAAM,GAAG,EAAE;QAEjBF,QAAQ,CAACG,eAAe,GAAIC,CAAC,IAAK;UAC9B,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAEJ,MAAM,CAACK,IAAI,CAACH,CAAC,CAACC,IAAI,CAAC;QAC5C,CAAC;QAEDL,QAAQ,CAACQ,MAAM,GAAG,MAAM;UACpB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACR,MAAM,EAAE;YAAES,IAAI,EAAE;UAAa,CAAC,CAAC;UAC1D,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACL,SAAS,CAAC;UAE/C,MAAMM,QAAQ,GAAG;YACbC,EAAE,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,QAAQ;YACzBP,IAAI,EAAE,OAAO;YACbQ,GAAG,EAAEP,QAAQ;YACbQ,IAAI,EAAEX;UACV,CAAC;UACDvB,YAAY,CAACmC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEN,QAAQ,CAAC,CAAC;QAC7C,CAAC;QAEDf,QAAQ,CAACsB,KAAK,CAAC,CAAC;QAChBtC,gBAAgB,CAACgB,QAAQ,CAAC;QAC1BR,cAAc,CAACU,MAAM,CAAC;QACtBpB,cAAc,CAAC,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOyC,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;MACxD;IACJ,CAAC,MAAM;MACHxC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE2C,IAAI,CAAC,CAAC;MACrB5C,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM6C,gBAAgB,GAAGA,CAAA,KAAM;IAC3BnD,oBAAoB,CAAE6C,IAAI,IAAK,CAACA,IAAI,CAAC;EACzC,CAAC;EACD,MAAMO,iBAAiB,GAAIC,KAAK,IAAK;IACjC,IAAIC,WAAW,CAACC,OAAO,EAAE;MACrB,MAAMC,QAAQ,GAAGF,WAAW,CAACC,OAAO;MACpC,MAAMT,KAAK,GAAGU,QAAQ,CAACC,cAAc;MACrC,MAAMC,GAAG,GAAGF,QAAQ,CAACG,YAAY;MACjC,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAK;MAC5BJ,QAAQ,CAACI,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,CAAC,EAAEf,KAAK,CAAC,GAAGO,KAAK,GAAGO,KAAK,CAACC,KAAK,CAACH,GAAG,CAAC;MACjEF,QAAQ,CAACM,KAAK,CAAC,CAAC;MAChBN,QAAQ,CAACC,cAAc,GAAGD,QAAQ,CAACG,YAAY,GAAGb,KAAK,GAAGO,KAAK,CAACU,MAAM;MACtEC,WAAW,CAAC,CAAC;MACbpD,UAAU,CAAC4C,QAAQ,CAACI,KAAK,CAAC;MAC1BK,aAAa,CAAEC,cAAc,IAAK;QAC9B,MAAMC,OAAO,GAAG,CAACd,KAAK,EAAE,GAAGa,cAAc,CAACE,MAAM,CAACxC,CAAC,IAAIA,CAAC,KAAKyB,KAAK,CAAC,CAAC;QACnE,MAAMgB,SAAS,GAAGF,OAAO,CAACN,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAEtC,IAAI;UACAS,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;QACjE,CAAC,CAAC,OAAOzC,CAAC,EAAE;UACRoB,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAErB,CAAC,CAAC;QAC9D;QAEA,OAAOyC,SAAS;MACpB,CAAC,CAAC;IACN;EACJ,CAAC;EACD,MAAMf,WAAW,GAAGhF,MAAM,CAAC,IAAI,CAAC;EAChC;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM0F,WAAW,GAAGA,CAAA,KAAM;IACtB,MAAMR,QAAQ,GAAGF,WAAW,CAACC,OAAO;IACpC,IAAIC,QAAQ,EAAE;MACVA,QAAQ,CAACkB,KAAK,CAACC,MAAM,GAAG,MAAM;MAC9BnB,QAAQ,CAACkB,KAAK,CAACC,MAAM,GAAGnB,QAAQ,CAACoB,YAAY,GAAG,IAAI;IACxD;EACJ,CAAC;EAED,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACjC,IAAIrE,SAAS,CAACsD,MAAM,GAAG,EAAE,EAAE;MACvB,MAAMgB,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACH,KAAK,CAAC;MAC5C,MAAMI,QAAQ,GAAGJ,KAAK,CAACK,GAAG,CAAC,CAACxC,IAAI,EAAEyC,KAAK,MAAM;QACzC7C,EAAE,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAI2C,KAAK,EAAE;QAC5BlD,IAAI,EAAES,IAAI,CAACT,IAAI,CAACmD,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,OAAO;QACvD3C,GAAG,EAAEN,GAAG,CAACC,eAAe,CAACM,IAAI,CAAC;QAC9BA;MACJ,CAAC,CAAC,CAAC;MACHlC,YAAY,CAAEmC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE,GAAGsC,QAAQ,CAAC,CAAC;IAClD;EACJ,CAAC;EACD,MAAM,CAACI,UAAU,EAAEtB,aAAa,CAAC,GAAG1F,QAAQ,CAAC,MAAM;IAC/C,IAAI;MACA,MAAMiH,KAAK,GAAGlB,YAAY,CAACmB,OAAO,CAAC,YAAY,CAAC;MAChD,OAAOD,KAAK,GAAGhB,IAAI,CAACkB,KAAK,CAACF,KAAK,CAAC,GAAG,EAAE;IACzC,CAAC,CAAC,OAAO5D,CAAC,EAAE;MACRoB,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAErB,CAAC,CAAC;MAC5D,OAAO,EAAE;IACb;EACJ,CAAC,CAAC;;EAEF;EACA;EACA;EACA;;EAEA,oBAAQpC,OAAA;IAAMmG,IAAI,EAAC,cAAc;IAACC,SAAS,EAAEnH,MAAM,CAACoH,WAAY;IAAAC,QAAA,gBAC5DtG,OAAA;MACIuG,GAAG,EAAEzC,WAAY;MACjBqC,IAAI,EAAC,SAAS;MACdC,SAAS,EAAEnH,MAAM,CAACuH,YAAa;MAC/BC,YAAY,EAAC,KAAK;MAClBC,WAAW,EAAC,oJAA4B;MACxCC,OAAO,EAAEnC,WAAY;MACrBoC,IAAI,EAAE,CAAE;MACRC,QAAQ,EAAGzE,CAAC,IAAKhB,UAAU,CAACgB,CAAC,CAACsD,MAAM,CAACtB,KAAK;IAAE;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACFjH,OAAA;MAAKoG,SAAS,EAAEnH,MAAM,CAACiI,aAAc;MAAAZ,QAAA,gBACjCtG,OAAA;QAAQ2C,IAAI,EAAC,QAAQ;QAACwE,OAAO,EAAExD,gBAAiB;QAAA2C,QAAA,EAC3C/F,iBAAiB,gBACbP,OAAA;UAAKmD,GAAG,EAAE7D,cAAe;UAAC8H,GAAG,EAAC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAKjH,OAAA;UAAKmD,GAAG,EAAEjE,MAAO;UAACkI,GAAG,EAAC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE/E,CAAC,EACR1G,iBAAiB,iBACdP,OAAA,CAACH,kBAAkB;QAACwH,UAAU,EAAE5G,cAAe;QAAA6F,QAAA,eAC3CtG,OAAA,CAACJ,WAAW;UAAC0H,QAAQ,EAAE1D,iBAAkB;UAACmC,UAAU,EAAEA;QAAW;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CACvB,EAOAvG,cAAc,iBACXV,OAAA,CAACH,kBAAkB;QAACwH,UAAU,EAAEzG;MAAY;QAAAkG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExB,CACvB,eAEDjH,OAAA;QAAQ2C,IAAI,EAAC,QAAQ;QAACwE,OAAO,EAAEA,CAAA;UAAA,IAAAI,qBAAA;UAAA,QAAAA,qBAAA,GAAM9F,YAAY,CAACsC,OAAO,cAAAwD,qBAAA,uBAApBA,qBAAA,CAAsBC,KAAK,CAAC,CAAC;QAAA,CAAC;QAAAlB,QAAA,eAC/DtG,OAAA;UAAKmD,GAAG,EAAEzD,KAAM;UAAC0H,GAAG,EAAC;QAAc;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACTjH,OAAA;QACI2C,IAAI,EAAC,MAAM;QACX8E,MAAM,EAAC,iBAAiB;QACxBC,QAAQ;QACRnB,GAAG,EAAE9E,YAAa;QAClByD,KAAK,EAAE;UAAEyC,OAAO,EAAE;QAAO,CAAE;QAC3Bd,QAAQ,EAAExB;MAAkB;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFjH,OAAA;QAAQ2C,IAAI,EAAC,QAAQ;QAACwE,OAAO,EAAEzF,gBAAiB;QAAA4E,QAAA,EAC3CzF,WAAW,gBAAIb,OAAA;UAAKmD,GAAG,EAAE1D,gBAAiB;UAAC2H,GAAG,EAAC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAKjH,OAAA;UAAKmD,GAAG,EAAE9D,QAAS;UAAC+H,GAAG,EAAC;QAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9F,CAAC,eAETjH,OAAA;QAAQ2C,IAAI,EAAC,QAAQ;QAAA2D,QAAA,eAACtG,OAAA;UAAKmD,GAAG,EAAE/D,KAAM;UAACgI,GAAG,EAAC;QAAM;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX;AAAC3G,EAAA,CA3LQL,YAAY;EAAA,QAWjBH,eAAe,EACfA,eAAe;AAAA;AAAA8H,EAAA,GAZV3H,YAAY;AA6LrB,eAAeA,YAAY;AAAC,IAAA2H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}