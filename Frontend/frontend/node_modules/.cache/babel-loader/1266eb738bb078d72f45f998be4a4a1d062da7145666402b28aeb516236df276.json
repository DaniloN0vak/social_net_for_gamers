{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Frontend\\\\frontend\\\\src\\\\components\\\\Message.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/Message.module.css';\nimport { formatRelativeDateTime } from '../utils/dateUtils';\nimport { sortImageUrlsByAspectRatio } from '../utils/imageUtils';\nimport isEqual from 'lodash.isequal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(function Message(props) {\n  _s();\n  const {\n    content,\n    sentAt,\n    isEdited,\n    isRead,\n    media,\n    user,\n    isLeft\n  } = props;\n  const [sortedImageUrls, setSortedImageUrls] = useState([]);\n  useEffect(() => {\n    let isMounted = true;\n    async function sortImages() {\n      if (!media || media.length === 0) {\n        if (isMounted) setSortedImageUrls([]);\n        return;\n      }\n      const sorted = await sortImageUrlsByAspectRatio(media);\n      console.log(sorted);\n      const newUrls = sorted.map(img => img.src);\n      setSortedImageUrls(prevUrls => {\n        if (isEqual(newUrls, prevUrls)) {\n          return prevUrls;\n        }\n        return newUrls;\n      });\n    }\n    sortImages();\n    return () => {\n      isMounted = false;\n    };\n  }, [media]);\n  const renderImages = media => {\n    let mediaCode;\n    switch (media.length) {\n      case 1:\n        {\n          mediaCode = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.medium1,\n            children: /\\.(mp4|webm|ogg)$/i.test(media) ? /*#__PURE__*/_jsxDEV(\"video\", {\n              controls: true,\n              className: styles.medium,\n              src: media[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: media[0],\n              alt: `media-1`,\n              className: styles.medium\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this);\n        }\n        break;\n      case 2:\n        {}\n        break;\n      case 3:\n        {}\n        break;\n      case 4:\n        {}\n        break;\n      case 5:\n        {}\n        break;\n      case 6:\n        {}\n        break;\n      case 7:\n        {}\n        break;\n      case 8:\n        {}\n        break;\n      case 9:\n        {}\n        break;\n      case 10:\n        {}\n        break;\n    }\n    return mediaCode;\n  };\n  const message = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.main} ${isLeft ? styles.mainLeft : styles.mainRight}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.info}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.infoImage,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.avatar,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: (user === null || user === void 0 ? void 0 : user.avatar) || '/default-avatar.png',\n            alt: \"Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.infoName,\n        children: [user.firstName, \" \", user.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.infoTime,\n        children: formatRelativeDateTime(sentAt)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.contentText,\n        children: [content, \" \", isEdited && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.isEdited,\n          children: \"(\\u0437\\u043C\\u0456\\u043D\\u0435\\u043D\\u043E)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), media && media.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.media,\n        children: renderImages(sortedImageUrls)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n  return message;\n}, \"SdebM5577iyVtf2VVtB7DxiYfFk=\")), \"SdebM5577iyVtf2VVtB7DxiYfFk=\");\n_c2 = Message;\nexport default Message;\nvar _c, _c2;\n$RefreshReg$(_c, \"Message$React.memo\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"names":["React","useState","useEffect","styles","formatRelativeDateTime","sortImageUrlsByAspectRatio","isEqual","jsxDEV","_jsxDEV","Message","_s","memo","_c","props","content","sentAt","isEdited","isRead","media","user","isLeft","sortedImageUrls","setSortedImageUrls","isMounted","sortImages","length","sorted","console","log","newUrls","map","img","src","prevUrls","renderImages","mediaCode","className","medium1","children","test","controls","medium","fileName","_jsxFileName","lineNumber","columnNumber","alt","message","main","mainLeft","mainRight","info","infoImage","avatar","infoName","firstName","lastName","infoTime","contentText","_c2","$RefreshReg$"],"sources":["D:/Diplomarbeit/Frontend/frontend/src/components/Message.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from '../styles/Message.module.css';\r\nimport { formatRelativeDateTime } from '../utils/dateUtils';\r\nimport { sortImageUrlsByAspectRatio } from '../utils/imageUtils';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst Message = React.memo(function Message(props) {\r\n    const { content, sentAt, isEdited, isRead, media, user, isLeft } = props;\r\n    const [sortedImageUrls, setSortedImageUrls] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        async function sortImages() {\r\n            if (!media || media.length === 0) {\r\n                if (isMounted) setSortedImageUrls([]);\r\n                return;\r\n            }\r\n            const sorted = await sortImageUrlsByAspectRatio(media);\r\n            console.log(sorted);\r\n            const newUrls = sorted.map(img => img.src);\r\n\r\n            setSortedImageUrls(prevUrls => {\r\n                if (isEqual(newUrls, prevUrls)) {\r\n                    return prevUrls;\r\n                }\r\n                return newUrls;\r\n            });\r\n        }\r\n\r\n        sortImages();\r\n\r\n        return () => {\r\n            isMounted = false;\r\n        };\r\n    }, [media]);\r\n\r\n    const renderImages = (media) => {\r\n        let mediaCode;\r\n        switch (media.length) {\r\n            case 1: {\r\n                mediaCode = (\r\n                    <div className={styles.medium1}>\r\n                        {/\\.(mp4|webm|ogg)$/i.test(media) ? (\r\n                            <video controls className={styles.medium} src={media[0]} />\r\n                        ) : (\r\n                            <img src={media[0]} alt={`media-1`} className={styles.medium} />\r\n                        )}\r\n                    </div>\r\n                );\r\n            } break;\r\n            case 2: {\r\n\r\n            } break;\r\n            case 3: {\r\n\r\n            } break;\r\n            case 4: {\r\n\r\n            } break;\r\n            case 5: {\r\n\r\n            } break;\r\n            case 6: {\r\n\r\n            } break;\r\n            case 7: {\r\n\r\n            } break;\r\n            case 8: {\r\n\r\n            } break;\r\n            case 9: {\r\n\r\n            } break;\r\n            case 10: {\r\n\r\n            } break;\r\n        }\r\n        return mediaCode;\r\n    };\r\n\r\n    const message = (\r\n        <div className={`${styles.main} ${isLeft ? styles.mainLeft : styles.mainRight}`}>\r\n            <div className={`${styles.info}`}>\r\n                <div className={styles.infoImage}>\r\n                    <div className={styles.avatar} >\r\n                        <img src={user?.avatar || '/default-avatar.png'} alt=\"Avatar\" />\r\n                    </div>\r\n                </div>\r\n                <div className={styles.infoName}>\r\n                    {user.firstName} {user.lastName}\r\n                </div>\r\n                <div className={styles.infoTime}>\r\n                    {formatRelativeDateTime(sentAt)}\r\n                </div>\r\n                {/* <div className={styles.isRead}>\r\n                    {isRead ? <p>Read</p> : <p>Not read</p>}\r\n                </div> */}\r\n            </div>\r\n            <div className={styles.content}>\r\n                <div className={styles.contentText}>\r\n                    {content} {isEdited &&\r\n                        <span className={styles.isEdited}>(змінено)</span>}\r\n                </div>\r\n\r\n                {media && media.length > 0 && (\r\n                    <div className={styles.media}>\r\n                        {renderImages(sortedImageUrls)}\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n    return message;\r\n});\r\n\r\nexport default Message;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}