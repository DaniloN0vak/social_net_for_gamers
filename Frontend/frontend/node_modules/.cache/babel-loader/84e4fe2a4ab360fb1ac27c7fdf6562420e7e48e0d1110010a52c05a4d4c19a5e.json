{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport * as signalR from '@microsoft/signalr';\nfunction useChatWebSocket(chatId, onNewMessage) {\n  _s();\n  const connectionRef = useRef(null);\n  useEffect(() => {\n    if (!chatId) return;\n    const connection = new signalR.HubConnectionBuilder().withUrl(`${process.env.REACT_APP_API_URL}/chatHub?chatId=${chatId}`).withAutomaticReconnect().build();\n    connection.start().then(() => {\n      console.log('SignalR connected');\n      connection.on('ReceiveMessage', (receivedChatId, userId, message) => {\n        if (String(receivedChatId) === String(chatId)) {\n          onNewMessage({\n            chatId: receivedChatId,\n            userId,\n            message\n          });\n        }\n      });\n    }).catch(err => {\n      console.error('SignalR error:', err);\n    });\n    connectionRef.current = connection;\n    return () => {\n      connection.stop().then(() => {\n        console.log('SignalR disconnected');\n      });\n    };\n  }, [chatId, onNewMessage]);\n}\n_s(useChatWebSocket, \"Q75jzstoj70Xl4uzOerrVl9m/vI=\");\nexport default useChatWebSocket;","map":{"version":3,"names":["useEffect","useRef","signalR","useChatWebSocket","chatId","onNewMessage","_s","connectionRef","connection","HubConnectionBuilder","withUrl","process","env","REACT_APP_API_URL","withAutomaticReconnect","build","start","then","console","log","on","receivedChatId","userId","message","String","catch","err","error","current","stop"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/chat-items/main/components/useChatWebSocket.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport * as signalR from '@microsoft/signalr';\r\n\r\nfunction useChatWebSocket(chatId, onNewMessage) {\r\n  const connectionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!chatId) return;\r\n\r\n    const connection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`${process.env.REACT_APP_API_URL}/chatHub?chatId=${chatId}`)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    connection\r\n      .start()\r\n      .then(() => {\r\n        console.log('SignalR connected');\r\n        connection.on('ReceiveMessage', (receivedChatId, userId, message) => {\r\n          if (String(receivedChatId) === String(chatId)) {\r\n            onNewMessage({ chatId: receivedChatId, userId, message });\r\n          }\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error('SignalR error:', err);\r\n      });\r\n\r\n    connectionRef.current = connection;\r\n\r\n    return () => {\r\n      connection.stop().then(() => {\r\n        console.log('SignalR disconnected');\r\n      });\r\n    };\r\n  }, [chatId, onNewMessage]);\r\n}\r\n\r\nexport default useChatWebSocket;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAO,KAAKC,OAAO,MAAM,oBAAoB;AAE7C,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,YAAY,EAAE;EAAAC,EAAA;EAC9C,MAAMC,aAAa,GAAGN,MAAM,CAAC,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACI,MAAM,EAAE;IAEb,MAAMI,UAAU,GAAG,IAAIN,OAAO,CAACO,oBAAoB,CAAC,CAAC,CAClDC,OAAO,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,mBAAmBT,MAAM,EAAE,CAAC,CACpEU,sBAAsB,CAAC,CAAC,CACxBC,KAAK,CAAC,CAAC;IAEVP,UAAU,CACPQ,KAAK,CAAC,CAAC,CACPC,IAAI,CAAC,MAAM;MACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChCX,UAAU,CAACY,EAAE,CAAC,gBAAgB,EAAE,CAACC,cAAc,EAAEC,MAAM,EAAEC,OAAO,KAAK;QACnE,IAAIC,MAAM,CAACH,cAAc,CAAC,KAAKG,MAAM,CAACpB,MAAM,CAAC,EAAE;UAC7CC,YAAY,CAAC;YAAED,MAAM,EAAEiB,cAAc;YAAEC,MAAM;YAAEC;UAAQ,CAAC,CAAC;QAC3D;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAI;MACZR,OAAO,CAACS,KAAK,CAAC,gBAAgB,EAAED,GAAG,CAAC;IACtC,CAAC,CAAC;IAEJnB,aAAa,CAACqB,OAAO,GAAGpB,UAAU;IAElC,OAAO,MAAM;MACXA,UAAU,CAACqB,IAAI,CAAC,CAAC,CAACZ,IAAI,CAAC,MAAM;QAC3BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,CAACf,MAAM,EAAEC,YAAY,CAAC,CAAC;AAC5B;AAACC,EAAA,CAjCQH,gBAAgB;AAmCzB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}