{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\n// CustomAudioPlayer.jsx\nimport React, { useRef, useState, useEffect } from 'react';\nimport styles from './CustomAudioPlayer.module.css';\nimport pauseImg from '../../../assets/images/custom-audio-player/pause.png';\nimport playImg from '../../../assets/images/custom-audio-player/play.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomAudioPlayer({\n  src\n}) {\n  _s();\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0); // в процентах\n  const [duration, setDuration] = useState(0); // в секундах\n  const [currentTime, setCurrentTime] = useState(0); // в секундах\n\n  // Подстройка поджатия времени в формат мм:сс\n  const formatTime = time => {\n    const m = Math.floor(time / 60);\n    const s = Math.floor(time % 60);\n    return `${m}:${s < 10 ? '0' : ''}${s}`;\n  };\n\n  // Загружены метаданные — узнаём длительность\n  const handleLoadedMetadata = () => {\n    const audio = audioRef.current;\n    if (!isNaN(audio.duration)) {\n      setDuration(audio.duration);\n    }\n  };\n\n  // Каждое обновление позиции\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    if (audio.duration > 0) {\n      const ct = audio.currentTime;\n      setCurrentTime(ct);\n      setProgress(ct / audio.duration * 100);\n    }\n  };\n\n  // Клик по полосе прогресса\n  const handleProgressClick = e => {\n    if (duration <= 0) return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const newPct = clickX / rect.width;\n    const audio = audioRef.current;\n    audio.currentTime = newPct * audio.duration;\n    // сразу обновляем стейт\n    setCurrentTime(audio.currentTime);\n    setProgress(newPct * 100);\n  };\n\n  // Play / Pause\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (audio.paused) {\n      audio.play();\n      setIsPlaying(true);\n    } else {\n      audio.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  // При смене src — сбрасываем всё в начало\n  useEffect(() => {\n    setIsPlaying(false);\n    setProgress(0);\n    setDuration(0);\n    setCurrentTime(0);\n  }, [src]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.audioPlayer,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      preload: \"metadata\",\n      onLoadedMetadata: handleLoadedMetadata,\n      onTimeUpdate: handleTimeUpdate,\n      onEnded: () => setIsPlaying(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.playButton,\n      onClick: togglePlay,\n      \"aria-label\": isPlaying ? 'Pause' : 'Play',\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: isPlaying ? pauseImg : playImg,\n        alt: isPlaying ? 'Pause' : 'Play',\n        className: styles.playIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.progressBar,\n      onClick: handleProgressClick,\n      role: \"progressbar\",\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": duration,\n      \"aria-valuenow\": currentTime,\n      tabIndex: 0,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.progress,\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.timeDisplay,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" / \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomAudioPlayer, \"W4K5VeO2fxA/wKncmGs8m6wbArA=\");\n_c = CustomAudioPlayer;\nexport default CustomAudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"CustomAudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","styles","pauseImg","playImg","jsxDEV","_jsxDEV","CustomAudioPlayer","src","_s","audioRef","isPlaying","setIsPlaying","progress","setProgress","duration","setDuration","currentTime","setCurrentTime","formatTime","time","m","Math","floor","s","handleLoadedMetadata","audio","current","isNaN","handleTimeUpdate","ct","handleProgressClick","e","rect","currentTarget","getBoundingClientRect","clickX","clientX","left","newPct","width","togglePlay","paused","play","pause","className","audioPlayer","children","ref","preload","onLoadedMetadata","onTimeUpdate","onEnded","fileName","_jsxFileName","lineNumber","columnNumber","type","playButton","onClick","alt","playIcon","progressBar","role","tabIndex","style","timeDisplay","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// CustomAudioPlayer.jsx\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport styles from './CustomAudioPlayer.module.css';\r\nimport pauseImg from '../../../assets/images/custom-audio-player/pause.png';\r\nimport playImg from '../../../assets/images/custom-audio-player/play.png';\r\n\r\nfunction CustomAudioPlayer({ src }) {\r\n  const audioRef = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [progress, setProgress] = useState(0);       // в процентах\r\n  const [duration, setDuration] = useState(0);       // в секундах\r\n  const [currentTime, setCurrentTime] = useState(0); // в секундах\r\n\r\n  // Подстройка поджатия времени в формат мм:сс\r\n  const formatTime = (time) => {\r\n    const m = Math.floor(time / 60);\r\n    const s = Math.floor(time % 60);\r\n    return `${m}:${s < 10 ? '0' : ''}${s}`;\r\n  };\r\n\r\n  // Загружены метаданные — узнаём длительность\r\n  const handleLoadedMetadata = () => {\r\n    const audio = audioRef.current;\r\n    if (!isNaN(audio.duration)) {\r\n      setDuration(audio.duration);\r\n    }\r\n  };\r\n\r\n  // Каждое обновление позиции\r\n  const handleTimeUpdate = () => {\r\n    const audio = audioRef.current;\r\n    if (audio.duration > 0) {\r\n      const ct = audio.currentTime;\r\n      setCurrentTime(ct);\r\n      setProgress((ct / audio.duration) * 100);\r\n    }\r\n  };\r\n\r\n  // Клик по полосе прогресса\r\n  const handleProgressClick = (e) => {\r\n    if (duration <= 0) return;\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const clickX = e.clientX - rect.left;\r\n    const newPct = clickX / rect.width;\r\n    const audio = audioRef.current;\r\n    audio.currentTime = newPct * audio.duration;\r\n    // сразу обновляем стейт\r\n    setCurrentTime(audio.currentTime);\r\n    setProgress(newPct * 100);\r\n  };\r\n\r\n  // Play / Pause\r\n  const togglePlay = () => {\r\n    const audio = audioRef.current;\r\n    if (audio.paused) {\r\n      audio.play();\r\n      setIsPlaying(true);\r\n    } else {\r\n      audio.pause();\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  // При смене src — сбрасываем всё в начало\r\n  useEffect(() => {\r\n    setIsPlaying(false);\r\n    setProgress(0);\r\n    setDuration(0);\r\n    setCurrentTime(0);\r\n  }, [src]);\r\n\r\n  return (\r\n    <div className={styles.audioPlayer}>\r\n      <audio\r\n        ref={audioRef}\r\n        src={src}\r\n        preload=\"metadata\"\r\n        onLoadedMetadata={handleLoadedMetadata}\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onEnded={() => setIsPlaying(false)}\r\n      />\r\n\r\n      <button\r\n        type=\"button\"\r\n        className={styles.playButton}\r\n        onClick={togglePlay}\r\n        aria-label={isPlaying ? 'Pause' : 'Play'}\r\n      >\r\n        <img\r\n          src={isPlaying ? pauseImg : playImg}\r\n          alt={isPlaying ? 'Pause' : 'Play'}\r\n          className={styles.playIcon}\r\n        />\r\n      </button>\r\n\r\n      <div\r\n        className={styles.progressBar}\r\n        onClick={handleProgressClick}\r\n        role=\"progressbar\"\r\n        aria-valuemin={0}\r\n        aria-valuemax={duration}\r\n        aria-valuenow={currentTime}\r\n        tabIndex={0}\r\n      >\r\n        <div\r\n          className={styles.progress}\r\n          style={{ width: `${progress}%` }}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.timeDisplay}>\r\n        <span>{formatTime(currentTime)}</span>\r\n        <span> / </span>\r\n        <span>{formatTime(duration)}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomAudioPlayer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}