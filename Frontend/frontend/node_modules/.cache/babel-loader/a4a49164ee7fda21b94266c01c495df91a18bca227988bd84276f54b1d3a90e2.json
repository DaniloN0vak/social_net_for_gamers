{"ast":null,"code":"// import React, { useRef, useState, useEffect } from 'react';\n// import styles from './CustomAudioPlayer.module.css';\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\n// import play from '../../../assets/images/custom-audio-player/play.png';\n// import AudioTimer from '../audio-recorder/AudioTimer';\n\n// function CustomAudioPlayer({ src }) {\n//     const audioRef = useRef(null);\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [progress, setProgress] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const [currentTime, setCurrentTime] = useState(0);\n\n//     const togglePlay = () => {\n//         const audio = audioRef.current;\n//         if (audio.paused) {\n//             audio.play().then(() => {\n//                 setIsPlaying(true);\n//                 setCurrentTime(audio.currentTime);\n//                 setProgress((audio.currentTime / audio.duration) * 100);\n//             }).catch((err) => {\n//                 console.error(\"Playback failed:\", err);\n//             });\n//         } else {\n//             audio.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n\n//     const handleTimeUpdate = () => {\n//         const audio = audioRef.current;\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\n//             setCurrentTime(audio.currentTime);\n//             setProgress((audio.currentTime / audio.duration) * 100);\n//         } else {\n//             setProgress(0);\n//             setCurrentTime(0);\n//         }\n//     };\n\n//     const handleProgressClick = (e) => {\n//         if (duration <= 0) return;\n\n//         const rect = e.currentTarget.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left;\n//         const newProgress = clickX / rect.width;\n//         const audio = audioRef.current;\n//         audio.currentTime = newProgress * audio.duration;\n//         setProgress(newProgress * 100);\n//         setCurrentTime(audio.currentTime);\n//     };\n\n//     useEffect(() => {\n//         const audio = audioRef.current;\n\n//         const handleLoadedMetadata = () => {\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                 setDuration(audio.duration);\n//             } else {\n//                 audio.currentTime = 1e101;\n//                 audio.ontimeupdate = function () {\n//                     audio.ontimeupdate = null;\n//                     audio.currentTime = 0;\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                         setDuration(audio.duration);\n//                     }\n//                 };\n//             }\n//         };\n\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n//         audio.load();\n\n//         return () => {\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n//         };\n//     }, [src]);\n\n//     return (\n//         <div className={styles.audioPlayer}>\n//             <audio\n//                 ref={audioRef}\n//                 src={src}\n//                 onTimeUpdate={handleTimeUpdate}\n//                 onEnded={() => setIsPlaying(false)}\n//                 preload=\"auto\"\n//             />\n//             <button\n//                 type='button'\n//                 onClick={togglePlay}\n//                 className={styles.playButton}\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n//             >\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\n//             </button>\n//             <div\n//                 className={styles.progressBar}\n//                 onClick={handleProgressClick}\n//                 role=\"progressbar\"\n//                 aria-valuemin={0}\n//                 aria-valuemax={duration}\n//                 aria-valuenow={currentTime}\n//                 tabIndex={0}\n//             >\n//                 <div\n//                     className={styles.progress}\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\n//                 />\n//             </div>\n//             <AudioTimer\n//                 isPaused={!isPlaying}\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\n//                 withDot={false}\n//             />\n//         </div>\n//     );\n// }\n\n// export default CustomAudioPlayer;","map":{"version":3,"names":[],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\r\n// import styles from './CustomAudioPlayer.module.css';\r\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\r\n// import play from '../../../assets/images/custom-audio-player/play.png';\r\n// import AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\n\r\n// function CustomAudioPlayer({ src }) {\r\n//     const audioRef = useRef(null);\r\n//     const [isPlaying, setIsPlaying] = useState(false);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [duration, setDuration] = useState(0);\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n\r\n//     const togglePlay = () => {\r\n//         const audio = audioRef.current;\r\n//         if (audio.paused) {\r\n//             audio.play().then(() => {\r\n//                 setIsPlaying(true);\r\n//                 setCurrentTime(audio.currentTime);\r\n//                 setProgress((audio.currentTime / audio.duration) * 100);\r\n//             }).catch((err) => {\r\n//                 console.error(\"Playback failed:\", err);\r\n//             });\r\n//         } else {\r\n//             audio.pause();\r\n//             setIsPlaying(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleTimeUpdate = () => {\r\n//         const audio = audioRef.current;\r\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\r\n//             setCurrentTime(audio.currentTime);\r\n//             setProgress((audio.currentTime / audio.duration) * 100);\r\n//         } else {\r\n//             setProgress(0);\r\n//             setCurrentTime(0);\r\n//         }\r\n//     };\r\n\r\n//     const handleProgressClick = (e) => {\r\n//         if (duration <= 0) return;\r\n\r\n//         const rect = e.currentTarget.getBoundingClientRect();\r\n//         const clickX = e.clientX - rect.left;\r\n//         const newProgress = clickX / rect.width;\r\n//         const audio = audioRef.current;\r\n//         audio.currentTime = newProgress * audio.duration;\r\n//         setProgress(newProgress * 100);\r\n//         setCurrentTime(audio.currentTime);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const audio = audioRef.current;\r\n\r\n//         const handleLoadedMetadata = () => {\r\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                 setDuration(audio.duration);\r\n//             } else {\r\n//                 audio.currentTime = 1e101;\r\n//                 audio.ontimeupdate = function () {\r\n//                     audio.ontimeupdate = null;\r\n//                     audio.currentTime = 0;\r\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                         setDuration(audio.duration);\r\n//                     }\r\n//                 };\r\n//             }\r\n//         };\r\n\r\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         audio.load();\r\n\r\n//         return () => {\r\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         };\r\n//     }, [src]);\r\n\r\n\r\n//     return (\r\n//         <div className={styles.audioPlayer}>\r\n//             <audio\r\n//                 ref={audioRef}\r\n//                 src={src}\r\n//                 onTimeUpdate={handleTimeUpdate}\r\n//                 onEnded={() => setIsPlaying(false)}\r\n//                 preload=\"auto\"\r\n//             />\r\n//             <button\r\n//                 type='button'\r\n//                 onClick={togglePlay}\r\n//                 className={styles.playButton}\r\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n//             >\r\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n//             </button>\r\n//             <div\r\n//                 className={styles.progressBar}\r\n//                 onClick={handleProgressClick}\r\n//                 role=\"progressbar\"\r\n//                 aria-valuemin={0}\r\n//                 aria-valuemax={duration}\r\n//                 aria-valuenow={currentTime}\r\n//                 tabIndex={0}\r\n//             >\r\n//                 <div\r\n//                     className={styles.progress}\r\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\r\n//                 />\r\n//             </div>\r\n//             <AudioTimer\r\n//                 isPaused={!isPlaying}\r\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\r\n//                 withDot={false}\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default CustomAudioPlayer;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}