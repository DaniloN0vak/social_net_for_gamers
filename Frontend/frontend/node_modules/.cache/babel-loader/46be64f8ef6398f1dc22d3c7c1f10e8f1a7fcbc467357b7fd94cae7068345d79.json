{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomAudioPlayer({\n  src\n}) {\n  _s();\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (audio.paused) {\n      audio.play();\n      setIsPlaying(true);\n    } else {\n      audio.pause();\n      setIsPlaying(false);\n    }\n  };\n  const handleTimeUpdate = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (!isNaN(audio.duration) && audio.duration > 0) {\n      setCurrentTime(audio.currentTime);\n      setProgress(audio.currentTime / audio.duration * 100);\n    }\n  };\n  const handleLoadedMetadata = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    setDuration(audio.duration);\n  };\n  const handleProgressClick = e => {\n    const audio = audioRef.current;\n    if (!audio || duration <= 0) return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const newProgress = clickX / rect.width;\n    audio.currentTime = newProgress * audio.duration;\n    setProgress(newProgress * 100);\n    setCurrentTime(audio.currentTime);\n  };\n  useEffect(() => {\n    setIsPlaying(false);\n    setProgress(0);\n    setCurrentTime(0);\n    setDuration(0);\n    const audio = audioRef.current;\n    if (audio && audio.readyState >= 1) {\n      setDuration(audio.duration);\n    } else if (audio) {\n      audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n      return () => audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n    }\n  }, [src]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onTimeUpdate: handleTimeUpdate,\n      onEnded: () => setIsPlaying(false),\n      preload: \"metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      children: isPlaying ? 'Pause' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleProgressClick,\n      style: {\n        width: '100%',\n        height: '20px',\n        backgroundColor: '#eee',\n        cursor: 'pointer'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progress}%`,\n          height: '100%',\n          backgroundColor: 'blue'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Math.floor(currentTime), \" / \", Math.floor(duration)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomAudioPlayer, \"W4K5VeO2fxA/wKncmGs8m6wbArA=\");\n_c = CustomAudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"CustomAudioPlayer\");","map":{"version":3,"names":["CustomAudioPlayer","src","_s","audioRef","useRef","isPlaying","setIsPlaying","useState","progress","setProgress","duration","setDuration","currentTime","setCurrentTime","togglePlay","audio","current","paused","play","pause","handleTimeUpdate","isNaN","handleLoadedMetadata","handleProgressClick","e","rect","currentTarget","getBoundingClientRect","clickX","clientX","left","newProgress","width","useEffect","readyState","addEventListener","removeEventListener","_jsxDEV","children","ref","onTimeUpdate","onEnded","preload","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","height","backgroundColor","cursor","Math","floor","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["function CustomAudioPlayer({ src }) {\r\n  const audioRef = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  const togglePlay = () => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n    if (audio.paused) {\r\n      audio.play();\r\n      setIsPlaying(true);\r\n    } else {\r\n      audio.pause();\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  const handleTimeUpdate = () => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n    if (!isNaN(audio.duration) && audio.duration > 0) {\r\n      setCurrentTime(audio.currentTime);\r\n      setProgress((audio.currentTime / audio.duration) * 100);\r\n    }\r\n  };\r\n\r\n  const handleLoadedMetadata = () => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n    setDuration(audio.duration);\r\n  };\r\n\r\n  const handleProgressClick = (e) => {\r\n    const audio = audioRef.current;\r\n    if (!audio || duration <= 0) return;\r\n\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const clickX = e.clientX - rect.left;\r\n    const newProgress = clickX / rect.width;\r\n\r\n    audio.currentTime = newProgress * audio.duration;\r\n    setProgress(newProgress * 100);\r\n    setCurrentTime(audio.currentTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsPlaying(false);\r\n    setProgress(0);\r\n    setCurrentTime(0);\r\n    setDuration(0);\r\n\r\n    const audio = audioRef.current;\r\n    if (audio && audio.readyState >= 1) {\r\n      setDuration(audio.duration);\r\n    } else if (audio) {\r\n      audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n      return () => audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n    }\r\n  }, [src]);\r\n\r\n  return (\r\n    <div>\r\n      <audio\r\n        ref={audioRef}\r\n        src={src}\r\n        onTimeUpdate={handleTimeUpdate}\r\n        onEnded={() => setIsPlaying(false)}\r\n        preload=\"metadata\"\r\n      />\r\n      <button onClick={togglePlay}>{isPlaying ? 'Pause' : 'Play'}</button>\r\n      <div onClick={handleProgressClick} style={{width: '100%', height: '20px', backgroundColor: '#eee', cursor: 'pointer'}}>\r\n        <div style={{width: `${progress}%`, height: '100%', backgroundColor: 'blue'}} />\r\n      </div>\r\n      <div>{Math.floor(currentTime)} / {Math.floor(duration)}</div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}