{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer({\n  audioRef\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const animationId = useRef(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const dataArrayRef = useRef(null);\n  useEffect(() => {\n    if (!audioRef.current) return;\n    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    const audioCtx = audioContextRef.current;\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 64;\n    analyserRef.current = analyser;\n    const source = audioCtx.createMediaElementSource(audioRef.current);\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    dataArrayRef.current = dataArray;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    function draw() {\n      animationId.current = requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      const barWidth = WIDTH / bufferLength;\n      let x = 0;\n      for (let i = 0; i < bufferLength; i++) {\n        const barHeight = dataArray[i] / 255 * HEIGHT;\n        ctx.fillStyle = '#4A90E2'; // цвет полосы\n        ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\n        x += barWidth;\n      }\n    }\n    draw();\n    return () => {\n      cancelAnimationFrame(animationId.current);\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, [audioRef]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 300,\n    height: 50,\n    style: {\n      width: '100%',\n      height: '50px',\n      backgroundColor: '#222'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"CUfl7XgxhAmOZfe03/J9kvMSgAw=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","AudioVisualizer","audioRef","_s","canvasRef","animationId","audioContextRef","analyserRef","dataArrayRef","current","window","AudioContext","webkitAudioContext","audioCtx","analyser","createAnalyser","fftSize","source","createMediaElementSource","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","x","i","barHeight","fillStyle","fillRect","cancelAnimationFrame","close","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n\r\nfunction AudioVisualizer({ audioRef }) {\r\n    const canvasRef = useRef(null);\r\n    const animationId = useRef(null);\r\n    const audioContextRef = useRef(null);\r\n    const analyserRef = useRef(null);\r\n    const dataArrayRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!audioRef.current) return;\r\n\r\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n        const audioCtx = audioContextRef.current;\r\n        const analyser = audioCtx.createAnalyser();\r\n        analyser.fftSize = 64;\r\n        analyserRef.current = analyser;\r\n\r\n        const source = audioCtx.createMediaElementSource(audioRef.current);\r\n        source.connect(analyser);\r\n        analyser.connect(audioCtx.destination);\r\n\r\n        const bufferLength = analyser.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n        dataArrayRef.current = dataArray;\r\n\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        const WIDTH = canvas.width;\r\n        const HEIGHT = canvas.height;\r\n\r\n        function draw() {\r\n            animationId.current = requestAnimationFrame(draw);\r\n\r\n            analyser.getByteFrequencyData(dataArray);\r\n\r\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n\r\n            const barWidth = WIDTH / bufferLength;\r\n            let x = 0;\r\n\r\n            for (let i = 0; i < bufferLength; i++) {\r\n                const barHeight = (dataArray[i] / 255) * HEIGHT;\r\n\r\n                ctx.fillStyle = '#4A90E2'; // цвет полосы\r\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth * 0.8, barHeight);\r\n\r\n                x += barWidth;\r\n            }\r\n        }\r\n\r\n        draw();\r\n\r\n        return () => {\r\n            cancelAnimationFrame(animationId.current);\r\n            if (audioContextRef.current) {\r\n                audioContextRef.current.close();\r\n            }\r\n        };\r\n    }, [audioRef]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            width={300}\r\n            height={50}\r\n            style={{ width: '100%', height: '50px', backgroundColor: '#222' }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default AudioVisualizer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,eAAe,GAAGV,MAAM,CAAC,IAAI,CAAC;EACpC,MAAMW,WAAW,GAAGX,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMY,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEjCE,SAAS,CAAC,MAAM;IACZ,IAAI,CAACI,QAAQ,CAACO,OAAO,EAAE;IAEvBH,eAAe,CAACG,OAAO,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;IAClF,MAAMC,QAAQ,GAAGP,eAAe,CAACG,OAAO;IACxC,MAAMK,QAAQ,GAAGD,QAAQ,CAACE,cAAc,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,GAAG,EAAE;IACrBT,WAAW,CAACE,OAAO,GAAGK,QAAQ;IAE9B,MAAMG,MAAM,GAAGJ,QAAQ,CAACK,wBAAwB,CAAChB,QAAQ,CAACO,OAAO,CAAC;IAClEQ,MAAM,CAACE,OAAO,CAACL,QAAQ,CAAC;IACxBA,QAAQ,CAACK,OAAO,CAACN,QAAQ,CAACO,WAAW,CAAC;IAEtC,MAAMC,YAAY,GAAGP,QAAQ,CAACQ,iBAAiB;IAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAC9Cb,YAAY,CAACC,OAAO,GAAGc,SAAS;IAEhC,MAAME,MAAM,GAAGrB,SAAS,CAACK,OAAO;IAChC,MAAMiB,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnC,MAAMC,KAAK,GAAGH,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACM,MAAM;IAE5B,SAASC,IAAIA,CAAA,EAAG;MACZ3B,WAAW,CAACI,OAAO,GAAGwB,qBAAqB,CAACD,IAAI,CAAC;MAEjDlB,QAAQ,CAACoB,oBAAoB,CAACX,SAAS,CAAC;MAExCG,GAAG,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,KAAK,EAAEE,MAAM,CAAC;MAElC,MAAMM,QAAQ,GAAGR,KAAK,GAAGP,YAAY;MACrC,IAAIgB,CAAC,GAAG,CAAC;MAET,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,YAAY,EAAEiB,CAAC,EAAE,EAAE;QACnC,MAAMC,SAAS,GAAIhB,SAAS,CAACe,CAAC,CAAC,GAAG,GAAG,GAAIR,MAAM;QAE/CJ,GAAG,CAACc,SAAS,GAAG,SAAS,CAAC,CAAC;QAC3Bd,GAAG,CAACe,QAAQ,CAACJ,CAAC,EAAEP,MAAM,GAAGS,SAAS,EAAEH,QAAQ,GAAG,GAAG,EAAEG,SAAS,CAAC;QAE9DF,CAAC,IAAID,QAAQ;MACjB;IACJ;IAEAJ,IAAI,CAAC,CAAC;IAEN,OAAO,MAAM;MACTU,oBAAoB,CAACrC,WAAW,CAACI,OAAO,CAAC;MACzC,IAAIH,eAAe,CAACG,OAAO,EAAE;QACzBH,eAAe,CAACG,OAAO,CAACkC,KAAK,CAAC,CAAC;MACnC;IACJ,CAAC;EACL,CAAC,EAAE,CAACzC,QAAQ,CAAC,CAAC;EAEd,oBACIF,OAAA;IACI4C,GAAG,EAAExC,SAAU;IACfyB,KAAK,EAAE,GAAI;IACXE,MAAM,EAAE,EAAG;IACXc,KAAK,EAAE;MAAEhB,KAAK,EAAE,MAAM;MAAEE,MAAM,EAAE,MAAM;MAAEe,eAAe,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV;AAAC/C,EAAA,CApEQF,eAAe;AAAAkD,EAAA,GAAflD,eAAe;AAsExB,eAAeA,eAAe;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}