{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback, memo, useMemo } from 'react';\nimport pause from \"../../../assets/images/custom-audio-player/pause.png\";\nimport pauseHovered from \"../../../assets/images/custom-audio-player/pause-hovered.png\";\nimport play from \"../../../assets/images/custom-audio-player/play.png\";\nimport playHovered from \"../../../assets/images/custom-audio-player/play-hovered.png\";\nimport styles from \"./CustomAudioPlayer.module.css\";\nimport AudioTimer from '../audio-recorder/AudioTimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = ({\n  src,\n  barCount = 80,\n  barWidth = 2,\n  barGap = 2,\n  playedColor = '#1AAAF5',\n  unplayedColor = '#BBBBBE',\n  sliderColor = '#1AAAF5',\n  sliderWidth = 3,\n  canvasHeight = 25,\n  isLeft = false\n}) => {\n  _s();\n  var _audioRef$current;\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [peaks, setPeaks] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\n  const [isButtonHovered, setIsButtonHovered] = useState(false);\n  useEffect(() => {\n    if (!src) return;\n    const fetchAndDecode = async () => {\n      const resp = await fetch(src);\n      const arrayBuffer = await resp.arrayBuffer();\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const buffer = await audioCtx.decodeAudioData(arrayBuffer);\n      const rawData = buffer.getChannelData(0);\n      const blockSize = Math.floor(rawData.length / barCount);\n      const filtered = new Float32Array(barCount);\n      for (let i = 0; i < barCount; i++) {\n        let sum = 0;\n        for (let j = 0; j < blockSize; j++) {\n          sum += Math.abs(rawData[i * blockSize + j]);\n        }\n        filtered[i] = sum / blockSize;\n      }\n      const maxVal = Math.max(...filtered);\n      const normalized = maxVal > 0 ? filtered.map(v => v / maxVal) : filtered;\n      setPeaks(normalized);\n    };\n    fetchAndDecode();\n  }, [src, barCount]);\n  const onTimeUpdate = useCallback(() => {\n    const audio = audioRef.current;\n    if (!audio || peaks.length === 0) return;\n    let idx = 0;\n    if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n      idx = Math.floor(audio.currentTime / audio.duration * peaks.length);\n      setCurrentPeakIndex(idx);\n    } else {\n      audio.currentTime = 1e101;\n      audio.ontimeupdate = function () {\n        audio.ontimeupdate = null;\n        audio.currentTime = 0;\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n          idx = Math.floor(audio.currentTime / audio.duration * peaks.length);\n          setCurrentPeakIndex(idx);\n        }\n      };\n    }\n  }, [peaks.length]);\n  const handleCanvasClick = e => {\n    const canvas = canvasRef.current;\n    const audio = audioRef.current;\n    if (!canvas || !audio || !peaks.length || isNaN(audio.duration)) return;\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickRatio = clickX / canvas.width;\n    if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n      audio.currentTime = clickRatio * audio.duration;\n    } else {\n      audio.currentTime = 1e101;\n      audio.ontimeupdate = function () {\n        audio.ontimeupdate = null;\n        audio.currentTime = 0;\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n          audio.currentTime = clickRatio * audio.duration;\n        }\n      };\n    }\n    if (!isPlaying) {\n      audio.play();\n      setIsPlaying(true);\n    }\n  };\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  function drawRoundedRect(ctx, x, y, width, height, radius) {\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n    ctx.closePath();\n    ctx.fill();\n  }\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const height = canvas.height;\n    ctx.clearRect(0, 0, canvas.width, height);\n    peaks.forEach((val, i) => {\n      const barHeight = val * height;\n      const x = i * (barWidth + barGap);\n      ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\n      ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\n    });\n    const sliderX = currentPeakIndex * (barWidth + barGap) + barWidth / 2;\n    ctx.fillStyle = sliderColor;\n    drawRoundedRect(ctx, sliderX, 0, sliderWidth, height, 2);\n  }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor, sliderColor, sliderWidth]);\n  const displayTime = useMemo(() => {\n    const audio = audioRef.current;\n    if (!audio || isNaN(audio.duration)) return 0;\n    const current = audio.currentTime;\n    let duration = 0;\n    if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n      duration = audio.duration;\n    } else {\n      audio.currentTime = 1e101;\n      audio.ontimeupdate = function () {\n        audio.ontimeupdate = null;\n        audio.currentTime = 0;\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n          duration = audio.duration;\n        }\n      };\n    }\n    return current > 0 ? current * 1000 : duration * 1000;\n  }, [(_audioRef$current = audioRef.current) === null || _audioRef$current === void 0 ? void 0 : _audioRef$current.currentTime, isPlaying]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles.container} ${isLeft && styles.leftContainer}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePlay,\n      onMouseEnter: () => setIsButtonHovered(true),\n      onMouseLeave: () => setIsButtonHovered(false),\n      className: styles.btn,\n      children: isPlaying ? isButtonHovered ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pauseHovered,\n        alt: \"pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 52\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pause,\n        alt: \"pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 93\n      }, this) : isButtonHovered ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: playHovered,\n        alt: \"play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 46\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: play,\n        alt: \"play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 85\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.canvasContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: (barWidth + barGap) * barCount,\n        height: canvasHeight,\n        className: styles.canvasContainer,\n        onClick: handleCanvasClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AudioTimer, {\n        isPaused: !isPlaying,\n        time: displayTime,\n        withDot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onTimeUpdate: onTimeUpdate,\n      onEnded: () => setIsPlaying(false),\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioPlayer, \"kzo/p57FSEeCPFB3c2ZgXUr7GcA=\");\n_c = AudioPlayer;\nexport default _c2 = /*#__PURE__*/memo(AudioPlayer);\nvar _c, _c2;\n$RefreshReg$(_c, \"AudioPlayer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","memo","useMemo","pause","pauseHovered","play","playHovered","styles","AudioTimer","jsxDEV","_jsxDEV","AudioPlayer","src","barCount","barWidth","barGap","playedColor","unplayedColor","sliderColor","sliderWidth","canvasHeight","isLeft","_s","_audioRef$current","audioRef","canvasRef","peaks","setPeaks","isPlaying","setIsPlaying","currentPeakIndex","setCurrentPeakIndex","isButtonHovered","setIsButtonHovered","fetchAndDecode","resp","fetch","arrayBuffer","audioCtx","window","AudioContext","webkitAudioContext","buffer","decodeAudioData","rawData","getChannelData","blockSize","Math","floor","length","filtered","Float32Array","i","sum","j","abs","maxVal","max","normalized","map","v","onTimeUpdate","audio","current","idx","isNaN","duration","Infinity","currentTime","ontimeupdate","handleCanvasClick","e","canvas","rect","getBoundingClientRect","clickX","clientX","left","clickRatio","width","togglePlay","drawRoundedRect","ctx","x","y","height","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","getContext","clearRect","forEach","val","barHeight","fillStyle","fillRect","sliderX","displayTime","className","container","leftContainer","children","onClick","onMouseEnter","onMouseLeave","btn","alt","fileName","_jsxFileName","lineNumber","columnNumber","canvasContainer","ref","isPaused","time","withDot","onEnded","style","display","_c","_c2","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback, memo, useMemo } from 'react';\r\nimport pause from \"../../../assets/images/custom-audio-player/pause.png\";\r\nimport pauseHovered from \"../../../assets/images/custom-audio-player/pause-hovered.png\";\r\nimport play from \"../../../assets/images/custom-audio-player/play.png\";\r\nimport playHovered from \"../../../assets/images/custom-audio-player/play-hovered.png\";\r\n\r\nimport styles from \"./CustomAudioPlayer.module.css\";\r\nimport AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\nconst AudioPlayer = ({\r\n    src,\r\n    barCount = 80,\r\n    barWidth = 2,\r\n    barGap = 2,\r\n    playedColor = '#1AAAF5',\r\n    unplayedColor = '#BBBBBE',\r\n    sliderColor = '#1AAAF5',\r\n    sliderWidth = 3,\r\n    canvasHeight = 25,\r\n    isLeft = false\r\n}) => {\r\n    const audioRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [peaks, setPeaks] = useState([]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\r\n\r\n    const [isButtonHovered, setIsButtonHovered] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!src) return;\r\n        const fetchAndDecode = async () => {\r\n            const resp = await fetch(src);\r\n            const arrayBuffer = await resp.arrayBuffer();\r\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n            const buffer = await audioCtx.decodeAudioData(arrayBuffer);\r\n            const rawData = buffer.getChannelData(0);\r\n            const blockSize = Math.floor(rawData.length / barCount);\r\n            const filtered = new Float32Array(barCount);\r\n\r\n            for (let i = 0; i < barCount; i++) {\r\n                let sum = 0;\r\n                for (let j = 0; j < blockSize; j++) {\r\n                    sum += Math.abs(rawData[i * blockSize + j]);\r\n                }\r\n                filtered[i] = sum / blockSize;\r\n            }\r\n            const maxVal = Math.max(...filtered);\r\n            const normalized = maxVal > 0 ? filtered.map(v => v / maxVal) : filtered;\r\n            setPeaks(normalized);\r\n        };\r\n        fetchAndDecode();\r\n    }, [src, barCount]);\r\n\r\n    const onTimeUpdate = useCallback(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio || peaks.length === 0) return;\r\n\r\n        let idx = 0;\r\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n            idx = Math.floor((audio.currentTime / audio.duration) * peaks.length);\r\n            setCurrentPeakIndex(idx);\r\n        } else {\r\n            audio.currentTime = 1e101;\r\n            audio.ontimeupdate = function () {\r\n                audio.ontimeupdate = null;\r\n                audio.currentTime = 0;\r\n                if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n                    idx = Math.floor((audio.currentTime / audio.duration) * peaks.length);\r\n                    setCurrentPeakIndex(idx);\r\n                }\r\n            };\r\n        }\r\n\r\n    }, [peaks.length]);\r\n\r\n    const handleCanvasClick = (e) => {\r\n        const canvas = canvasRef.current;\r\n        const audio = audioRef.current;\r\n        if (!canvas || !audio || !peaks.length || isNaN(audio.duration)) return;\r\n\r\n        const rect = canvas.getBoundingClientRect();\r\n        const clickX = e.clientX - rect.left;\r\n        const clickRatio = clickX / canvas.width;\r\n\r\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n            audio.currentTime = clickRatio * audio.duration;\r\n        } else {\r\n            audio.currentTime = 1e101;\r\n            audio.ontimeupdate = function () {\r\n                audio.ontimeupdate = null;\r\n                audio.currentTime = 0;\r\n                if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n                    audio.currentTime = clickRatio * audio.duration;\r\n                }\r\n            };\r\n        }\r\n\r\n        if (!isPlaying) {\r\n            audio.play();\r\n            setIsPlaying(true);\r\n        }\r\n    };\r\n\r\n    const togglePlay = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n        if (isPlaying) {\r\n            audio.pause();\r\n        } else {\r\n            audio.play();\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    function drawRoundedRect(ctx, x, y, width, height, radius) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + radius, y);\r\n        ctx.lineTo(x + width - radius, y);\r\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        ctx.lineTo(x + width, y + height - radius);\r\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        ctx.lineTo(x + radius, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        ctx.lineTo(x, y + radius);\r\n        ctx.quadraticCurveTo(x, y, x + radius, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        const height = canvas.height;\r\n        ctx.clearRect(0, 0, canvas.width, height);\r\n\r\n        peaks.forEach((val, i) => {\r\n            const barHeight = val * height;\r\n            const x = i * (barWidth + barGap);\r\n            ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\r\n            ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\r\n        });\r\n\r\n        const sliderX = currentPeakIndex * (barWidth + barGap) + barWidth / 2;\r\n        ctx.fillStyle = sliderColor;\r\n        drawRoundedRect(ctx, sliderX, 0, sliderWidth, height, 2)\r\n    }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor, sliderColor, sliderWidth]);\r\n\r\n\r\n    const displayTime = useMemo(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio || isNaN(audio.duration)) return 0;\r\n\r\n        const current = audio.currentTime;\r\n        let duration = 0;\r\n\r\n        if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n            duration = audio.duration;\r\n        } else {\r\n            audio.currentTime = 1e101;\r\n            audio.ontimeupdate = function () {\r\n                audio.ontimeupdate = null;\r\n                audio.currentTime = 0;\r\n                if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n                    duration = audio.duration;\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        return current > 0 ? current * 1000 : duration * 1000;\r\n    }, [audioRef.current?.currentTime, isPlaying]);\r\n\r\n\r\n    return (\r\n        <div className={`${styles.container} ${isLeft && styles.leftContainer}`}>\r\n            <button\r\n                onClick={togglePlay}\r\n                onMouseEnter={() => setIsButtonHovered(true)}\r\n                onMouseLeave={() => setIsButtonHovered(false)}\r\n                className={styles.btn}\r\n            >\r\n                {\r\n                    isPlaying ? (isButtonHovered ? <img src={pauseHovered} alt=\"pause\" /> : <img src={pause} alt=\"pause\" />)\r\n                        : (isButtonHovered ? <img src={playHovered} alt='play' /> : <img src={play} alt='play' />)\r\n                }\r\n            </button>\r\n            <div className={styles.canvasContainer}>\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    width={(barWidth + barGap) * barCount}\r\n                    height={canvasHeight}\r\n                    className={styles.canvasContainer}\r\n                    onClick={handleCanvasClick}\r\n                />\r\n                <AudioTimer\r\n                    isPaused={!isPlaying}\r\n                    time={displayTime}\r\n                    withDot={false}\r\n                />\r\n\r\n            </div>\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                onTimeUpdate={onTimeUpdate}\r\n                onEnded={() => setIsPlaying(false)}\r\n                style={{ display: 'none' }}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(AudioPlayer);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}