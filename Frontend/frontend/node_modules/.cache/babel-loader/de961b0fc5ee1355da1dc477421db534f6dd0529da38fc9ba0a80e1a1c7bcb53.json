{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport styles from './CustomAudioPlayer.module.css';\nimport pause from '../../../assets/images/custom-audio-player/pause.png';\nimport play from '../../../assets/images/custom-audio-player/play.png';\nimport AudioTimer from '../audio-recorder/AudioTimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomAudioPlayer({\n  src\n}) {\n  _s();\n  const audioRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  // Для отображения прогресса и текущего времени без setState (чтобы избежать лагов)\n  const progressRef = useRef(0);\n  const currentTimeRef = useRef(0);\n  const updateProgress = () => {\n    const audio = audioRef.current;\n    if (audio && !audio.paused && audio.duration > 0) {\n      const current = isNaN(audio.currentTime) ? 0 : audio.currentTime;\n      const dur = isNaN(audio.duration) ? 0 : audio.duration;\n      currentTimeRef.current = current;\n      progressRef.current = current / dur * 100;\n\n      // Обновляем UI через setState — только для перерисовки таймера и прогрессбара\n      // чтобы React обновил компонент с новым значением\n      setDuration(dur); // duration меняется редко, можно обновлять без проблем\n\n      // Чтобы перерисовать прогресс и таймер, используем небольшую хитрость с setState:\n      // здесь можно обновить фейковое состояние, чтобы React знал, что надо перерисовать\n      // но лучше оставить это в состоянии, так как setDuration редко меняется, \n      // для прогресса и currentTime используем refs и style напрямую в рендере\n\n      animationFrameRef.current = requestAnimationFrame(updateProgress);\n    }\n  };\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (audio.paused) {\n      audio.play();\n      setIsPlaying(true);\n      animationFrameRef.current = requestAnimationFrame(updateProgress);\n    } else {\n      audio.pause();\n      setIsPlaying(false);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    }\n  };\n  const handleLoadedMetadata = () => {\n    const audio = audioRef.current;\n    if (audio && !isNaN(audio.duration)) {\n      setDuration(audio.duration);\n    }\n  };\n  const handleProgressClick = e => {\n    const audio = audioRef.current;\n    if (!audio || duration <= 0 || audio.readyState < 1) return;\n    const rect = e.currentTarget.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const newProgress = clickX / rect.width;\n    audio.currentTime = newProgress * audio.duration;\n\n    // Обновляем refs сразу для моментального отклика UI\n    currentTimeRef.current = audio.currentTime;\n    progressRef.current = newProgress * 100;\n  };\n  useEffect(() => {\n    const audio = audioRef.current;\n    setIsPlaying(false);\n    setDuration(0);\n    if (audio) {\n      if (audio.readyState >= 1) {\n        setDuration(audio.duration);\n      } else {\n        audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n        return () => {\n          audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        };\n      }\n    }\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [src]);\n  useEffect(() => {\n    if (!isPlaying && animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n  }, [isPlaying]);\n\n  // Получаем текущее значение времени и прогресса из audioRef или refs с fallback 0\n  const audio = audioRef.current;\n  const currentTime = audio && !isNaN(audio.currentTime) ? audio.currentTime : 0;\n  const progress = audio && !isNaN(audio.duration) && audio.duration > 0 ? currentTime / audio.duration * 100 : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.audioPlayer,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onEnded: () => setIsPlaying(false),\n      onLoadedMetadata: handleLoadedMetadata,\n      preload: \"metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: togglePlay,\n      className: styles.playButton,\n      \"aria-label\": isPlaying ? 'Pause audio' : 'Play audio',\n      children: isPlaying ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pause,\n        alt: \"Pause\",\n        className: styles.play\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: play,\n        alt: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 88\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.progressBar,\n      onClick: handleProgressClick,\n      role: \"progressbar\",\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": duration,\n      \"aria-valuenow\": currentTime,\n      tabIndex: 0,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.progress,\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AudioTimer, {\n      isPaused: !isPlaying,\n      time: currentTime,\n      withDot: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(CustomAudioPlayer, \"InhSnI/Mz6IHNKtnlQanSb4646M=\");\n_c = CustomAudioPlayer;\nexport default CustomAudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"CustomAudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","styles","pause","play","AudioTimer","jsxDEV","_jsxDEV","CustomAudioPlayer","src","_s","audioRef","animationFrameRef","isPlaying","setIsPlaying","duration","setDuration","progressRef","currentTimeRef","updateProgress","audio","current","paused","isNaN","currentTime","dur","requestAnimationFrame","togglePlay","cancelAnimationFrame","handleLoadedMetadata","handleProgressClick","e","readyState","rect","currentTarget","getBoundingClientRect","clickX","clientX","left","newProgress","width","addEventListener","removeEventListener","progress","className","audioPlayer","children","ref","onEnded","onLoadedMetadata","preload","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","playButton","alt","progressBar","role","tabIndex","style","isPaused","time","withDot","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport styles from './CustomAudioPlayer.module.css';\r\nimport pause from '../../../assets/images/custom-audio-player/pause.png';\r\nimport play from '../../../assets/images/custom-audio-player/play.png';\r\nimport AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\nfunction CustomAudioPlayer({ src }) {\r\n    const audioRef = useRef(null);\r\n    const animationFrameRef = useRef(null);\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [duration, setDuration] = useState(0);\r\n\r\n    // Для отображения прогресса и текущего времени без setState (чтобы избежать лагов)\r\n    const progressRef = useRef(0);\r\n    const currentTimeRef = useRef(0);\r\n\r\n    const updateProgress = () => {\r\n        const audio = audioRef.current;\r\n        if (audio && !audio.paused && audio.duration > 0) {\r\n            const current = isNaN(audio.currentTime) ? 0 : audio.currentTime;\r\n            const dur = isNaN(audio.duration) ? 0 : audio.duration;\r\n\r\n            currentTimeRef.current = current;\r\n            progressRef.current = (current / dur) * 100;\r\n\r\n            // Обновляем UI через setState — только для перерисовки таймера и прогрессбара\r\n            // чтобы React обновил компонент с новым значением\r\n            setDuration(dur); // duration меняется редко, можно обновлять без проблем\r\n\r\n            // Чтобы перерисовать прогресс и таймер, используем небольшую хитрость с setState:\r\n            // здесь можно обновить фейковое состояние, чтобы React знал, что надо перерисовать\r\n            // но лучше оставить это в состоянии, так как setDuration редко меняется, \r\n            // для прогресса и currentTime используем refs и style напрямую в рендере\r\n\r\n            animationFrameRef.current = requestAnimationFrame(updateProgress);\r\n        }\r\n    };\r\n\r\n    const togglePlay = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n\r\n        if (audio.paused) {\r\n            audio.play();\r\n            setIsPlaying(true);\r\n            animationFrameRef.current = requestAnimationFrame(updateProgress);\r\n        } else {\r\n            audio.pause();\r\n            setIsPlaying(false);\r\n            if (animationFrameRef.current) {\r\n                cancelAnimationFrame(animationFrameRef.current);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleLoadedMetadata = () => {\r\n        const audio = audioRef.current;\r\n        if (audio && !isNaN(audio.duration)) {\r\n            setDuration(audio.duration);\r\n        }\r\n    };\r\n\r\n    const handleProgressClick = (e) => {\r\n        const audio = audioRef.current;\r\n        if (!audio || duration <= 0 || audio.readyState < 1) return;\r\n\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        const clickX = e.clientX - rect.left;\r\n        const newProgress = clickX / rect.width;\r\n\r\n        audio.currentTime = newProgress * audio.duration;\r\n\r\n        // Обновляем refs сразу для моментального отклика UI\r\n        currentTimeRef.current = audio.currentTime;\r\n        progressRef.current = newProgress * 100;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const audio = audioRef.current;\r\n        setIsPlaying(false);\r\n        setDuration(0);\r\n\r\n        if (audio) {\r\n            if (audio.readyState >= 1) {\r\n                setDuration(audio.duration);\r\n            } else {\r\n                audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n                return () => {\r\n                    audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n                };\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (animationFrameRef.current) {\r\n                cancelAnimationFrame(animationFrameRef.current);\r\n            }\r\n        };\r\n    }, [src]);\r\n\r\n    useEffect(() => {\r\n        if (!isPlaying && animationFrameRef.current) {\r\n            cancelAnimationFrame(animationFrameRef.current);\r\n        }\r\n    }, [isPlaying]);\r\n\r\n    // Получаем текущее значение времени и прогресса из audioRef или refs с fallback 0\r\n    const audio = audioRef.current;\r\n    const currentTime = audio && !isNaN(audio.currentTime) ? audio.currentTime : 0;\r\n    const progress = audio && !isNaN(audio.duration) && audio.duration > 0\r\n        ? (currentTime / audio.duration) * 100\r\n        : 0;\r\n\r\n    return (\r\n        <div className={styles.audioPlayer}>\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                onEnded={() => setIsPlaying(false)}\r\n                onLoadedMetadata={handleLoadedMetadata}\r\n                preload=\"metadata\"\r\n            />\r\n            <button\r\n                type='button'\r\n                onClick={togglePlay}\r\n                className={styles.playButton}\r\n                aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n            >\r\n                {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n            </button>\r\n            <div\r\n                className={styles.progressBar}\r\n                onClick={handleProgressClick}\r\n                role=\"progressbar\"\r\n                aria-valuemin={0}\r\n                aria-valuemax={duration}\r\n                aria-valuenow={currentTime}\r\n                tabIndex={0}\r\n            >\r\n                <div\r\n                    className={styles.progress}\r\n                    style={{ width: `${progress}%` }}\r\n                />\r\n            </div>\r\n            <AudioTimer isPaused={!isPlaying} time={currentTime} withDot={false} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomAudioPlayer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}