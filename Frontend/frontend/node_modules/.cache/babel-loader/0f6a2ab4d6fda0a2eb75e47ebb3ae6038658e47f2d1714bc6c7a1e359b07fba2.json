{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\audio-recorder\\\\AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styles from './AudioRecorder.module.css';\nimport AudioControls from './AudioControls';\nimport AudioTimer from './AudioTimer';\nimport microfon from '../../../assets/images/message-form/microfon.png';\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioRecorder({\n  audioRecordingControl\n}) {\n  _s();\n  const [isRecorderOpen, setIsRecorderOpen] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunks = useRef([]);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [audioSrc, setAudioSrc] = useState(null);\n  const [previewReady, setPreviewReady] = useState(false);\n  const intervalRef = useRef(null);\n  const startTimeRef = useRef(null);\n  useEffect(() => {\n    if (isRecording && !isPaused) {\n      if (!startTimeRef.current) {\n        startTimeRef.current = Date.now() - recordingTime;\n      }\n      intervalRef.current = setInterval(() => {\n        setRecordingTime(Date.now() - startTimeRef.current);\n      }, 100);\n    } else {\n      clearInterval(intervalRef.current);\n      startTimeRef.current = null;\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [isRecording, isPaused]);\n  const startRecording = async () => {\n    if (!isRecorderOpen) {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const recorder = new MediaRecorder(stream);\n      chunks.current = [];\n      recorder.ondataavailable = e => {\n        if (e.data && e.data.size > 0) chunks.current.push(e.data);\n      };\n      mediaRecorderRef.current = recorder;\n      recorder.start();\n      setIsRecorderOpen(true);\n      setIsRecording(true);\n      setIsPaused(false);\n      setRecordingTime(0);\n    } else {\n      handleCancel();\n    }\n  };\n  const stopRecording = () => {\n    return new Promise(resolve => {\n      const recorder = mediaRecorderRef.current;\n      if (recorder && recorder.state !== 'inactive') {\n        const onStopHandler = () => {\n          const blob = new Blob(chunks.current.filter(c => c.size > 0), {\n            type: 'audio/webm'\n          });\n          const url = URL.createObjectURL(blob);\n          setAudioSrc(url);\n          setPreviewReady(true);\n          recorder.removeEventListener('stop', onStopHandler);\n          resolve();\n        };\n        recorder.addEventListener('stop', onStopHandler);\n        recorder.requestData();\n        recorder.stop();\n        setIsRecording(false);\n        setIsPaused(false);\n      } else {\n        resolve();\n      }\n    });\n  };\n  const pauseRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.pause();\n      setIsPaused(true);\n    }\n  };\n  const resumeRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'paused') {\n      mediaRecorderRef.current.resume();\n      setIsPaused(false);\n    }\n  };\n  const handleSend = async () => {\n    await stopRecording();\n    if (chunks.current.length === 0) {\n      console.warn('Аудио не записано');\n      return;\n    }\n    const blob = new Blob(chunks.current.filter(c => c.size > 0), {\n      type: 'audio/webm'\n    });\n    const file = new File([blob], 'audio-message.webm', {\n      type: 'audio/webm'\n    });\n    audioRecordingControl.setAudio({\n      type: file.type,\n      name: file.name,\n      id: 'audio_' + Date.now(),\n      file: file,\n      size: file.size,\n      src: URL.createObjectURL(blob)\n    });\n    chunks.current = [];\n    setAudioSrc(null);\n    setPreviewReady(false);\n    setIsRecorderOpen(false);\n    setRecordingTime(0);\n  };\n  const handleCancel = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    chunks.current = [];\n    setAudioSrc(null);\n    setPreviewReady(false);\n    setIsRecorderOpen(false);\n    setIsRecording(false);\n    setIsPaused(false);\n    setRecordingTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: startRecording,\n      children: isRecorderOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: microfonSelected,\n        alt: \"stop audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: microfon,\n        alt: \"record audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), isRecorderOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modal,\n      children: isRecording && !previewReady && /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPaused: isPaused,\n        pauseRecording: pauseRecording,\n        resumeRecording: resumeRecording,\n        stopRecording: stopRecording,\n        cancelRecording: handleCancel,\n        onSend: handleSend,\n        children: /*#__PURE__*/_jsxDEV(AudioTimer, {\n          isPaused: isPaused,\n          time: recordingTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioRecorder, \"C7igcKBAFk0YCeyDPbBEUSn6X28=\");\n_c = AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styles","AudioControls","AudioTimer","microfon","microfonSelected","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecorder","audioRecordingControl","_s","isRecorderOpen","setIsRecorderOpen","isRecording","setIsRecording","isPaused","setIsPaused","mediaRecorderRef","chunks","recordingTime","setRecordingTime","audioSrc","setAudioSrc","previewReady","setPreviewReady","intervalRef","startTimeRef","current","Date","now","setInterval","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","ondataavailable","e","data","size","push","start","handleCancel","stopRecording","Promise","resolve","state","onStopHandler","blob","Blob","filter","c","type","url","URL","createObjectURL","removeEventListener","addEventListener","requestData","stop","pauseRecording","pause","resumeRecording","resume","handleSend","length","console","warn","file","File","setAudio","name","id","src","children","onClick","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","modal","cancelRecording","onSend","time","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/audio-recorder/AudioRecorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styles from './AudioRecorder.module.css';\r\nimport AudioControls from './AudioControls';\r\nimport AudioTimer from './AudioTimer';\r\nimport microfon from '../../../assets/images/message-form/microfon.png';\r\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\r\n\r\nexport default function AudioRecorder({ audioRecordingControl }) {\r\n    const [isRecorderOpen, setIsRecorderOpen] = useState(false);\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const mediaRecorderRef = useRef(null);\r\n    const chunks = useRef([]);\r\n    const [recordingTime, setRecordingTime] = useState(0);\r\n    const [audioSrc, setAudioSrc] = useState(null);\r\n    const [previewReady, setPreviewReady] = useState(false);\r\n    const intervalRef = useRef(null);\r\n    const startTimeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (isRecording && !isPaused) {\r\n            if (!startTimeRef.current) {\r\n                startTimeRef.current = Date.now() - recordingTime;\r\n            }\r\n\r\n            intervalRef.current = setInterval(() => {\r\n                setRecordingTime(Date.now() - startTimeRef.current);\r\n            }, 100);\r\n        } else {\r\n            clearInterval(intervalRef.current);\r\n            startTimeRef.current = null;\r\n        }\r\n        return () => clearInterval(intervalRef.current);\r\n    }, [isRecording, isPaused]);\r\n\r\n    const startRecording = async () => {\r\n        if (!isRecorderOpen) {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            const recorder = new MediaRecorder(stream);\r\n            chunks.current = [];\r\n\r\n            recorder.ondataavailable = e => {\r\n                if (e.data && e.data.size > 0) chunks.current.push(e.data);\r\n            };\r\n\r\n            mediaRecorderRef.current = recorder;\r\n            recorder.start();\r\n\r\n            setIsRecorderOpen(true);\r\n            setIsRecording(true);\r\n            setIsPaused(false);\r\n            setRecordingTime(0);\r\n        } else {\r\n            handleCancel();\r\n        }\r\n    };\r\n\r\n\r\n    const stopRecording = () => {\r\n        return new Promise((resolve) => {\r\n            const recorder = mediaRecorderRef.current;\r\n            if (recorder && recorder.state !== 'inactive') {\r\n                const onStopHandler = () => {\r\n                    const blob = new Blob(chunks.current.filter(c => c.size > 0), { type: 'audio/webm' });\r\n                    const url = URL.createObjectURL(blob);\r\n                    setAudioSrc(url);\r\n                    setPreviewReady(true);\r\n                    recorder.removeEventListener('stop', onStopHandler);\r\n                    resolve();\r\n                };\r\n                recorder.addEventListener('stop', onStopHandler);\r\n                recorder.requestData();\r\n                recorder.stop();\r\n                setIsRecording(false);\r\n                setIsPaused(false);\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const pauseRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n            mediaRecorderRef.current.pause();\r\n            setIsPaused(true);\r\n        }\r\n    };\r\n\r\n    const resumeRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'paused') {\r\n            mediaRecorderRef.current.resume();\r\n            setIsPaused(false);\r\n        }\r\n    };\r\n    const handleSend = async () => {\r\n        await stopRecording();\r\n\r\n        if (chunks.current.length === 0) {\r\n            console.warn('Аудио не записано');\r\n            return;\r\n        }\r\n\r\n        const blob = new Blob(chunks.current.filter(c => c.size > 0), { type: 'audio/webm' });\r\n        const file = new File([blob], 'audio-message.webm', { type: 'audio/webm' });\r\n\r\n        audioRecordingControl.setAudio({\r\n            type: file.type,\r\n            name: file.name,\r\n            id: 'audio_' + Date.now(),\r\n            file: file,\r\n            size: file.size,\r\n            src: URL.createObjectURL(blob),\r\n        });\r\n\r\n        chunks.current = [];\r\n        setAudioSrc(null);\r\n        setPreviewReady(false);\r\n        setIsRecorderOpen(false);\r\n        setRecordingTime(0);\r\n    };\r\n\r\n\r\n    const handleCancel = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n            mediaRecorderRef.current.stop();\r\n        }\r\n        chunks.current = [];\r\n        setAudioSrc(null);\r\n        setPreviewReady(false);\r\n        setIsRecorderOpen(false);\r\n        setIsRecording(false);\r\n        setIsPaused(false);\r\n        setRecordingTime(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={startRecording}>\r\n                {isRecorderOpen ? (\r\n                    <img src={microfonSelected} alt=\"stop audio\" />\r\n                ) : (\r\n                    <img src={microfon} alt=\"record audio\" />\r\n                )}\r\n            </button>\r\n\r\n            {isRecorderOpen && (\r\n                <div className={styles.modal}>\r\n                    {isRecording && !previewReady && (\r\n                        <AudioControls\r\n                            isPaused={isPaused}\r\n                            pauseRecording={pauseRecording}\r\n                            resumeRecording={resumeRecording}\r\n                            stopRecording={stopRecording}\r\n                            cancelRecording={handleCancel}\r\n                            onSend={handleSend}\r\n                        >\r\n                            <AudioTimer isPaused={isPaused} time={recordingTime} />\r\n                        </AudioControls>\r\n                    )}\r\n\r\n                    {/* {previewReady && (\r\n                        <AudioPreview\r\n                            audioSrc={audioSrc}\r\n                            onCancel={handleCancel}\r\n                            onSend={handleSend}\r\n                        />\r\n                    )} */}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}