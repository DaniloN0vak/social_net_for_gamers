{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\custom-audio-player\\\\CustomAudioPlayer.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useEffect } from 'react';\n// import styles from './CustomAudioPlayer.module.css';\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\n// import play from '../../../assets/images/custom-audio-player/play.png';\n// import AudioTimer from '../audio-recorder/AudioTimer';\n\n// function CustomAudioPlayer({ src }) {\n//     const audioRef = useRef(null);\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [progress, setProgress] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const [currentTime, setCurrentTime] = useState(0);\n\n//     const togglePlay = () => {\n//         const audio = audioRef.current;\n//         if (audio.paused) {\n//             audio.play().then(() => {\n//                 setIsPlaying(true);\n//                 setCurrentTime(audio.currentTime);\n//                 setProgress((audio.currentTime / audio.duration) * 100);\n//             }).catch((err) => {\n//                 console.error(\"Playback failed:\", err);\n//             });\n//         } else {\n//             audio.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n\n//     const handleTimeUpdate = () => {\n//         const audio = audioRef.current;\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\n//             setCurrentTime(audio.currentTime);\n//             setProgress((audio.currentTime / audio.duration) * 100);\n//         } else {\n//             setProgress(0);\n//             setCurrentTime(0);\n//         }\n//     };\n\n//     const handleProgressClick = (e) => {\n//         if (duration <= 0) return;\n\n//         const rect = e.currentTarget.getBoundingClientRect();\n//         const clickX = e.clientX - rect.left;\n//         const newProgress = clickX / rect.width;\n//         const audio = audioRef.current;\n//         audio.currentTime = newProgress * audio.duration;\n//         setProgress(newProgress * 100);\n//         setCurrentTime(audio.currentTime);\n//     };\n\n//     useEffect(() => {\n//         const audio = audioRef.current;\n\n//         const handleLoadedMetadata = () => {\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                 setDuration(audio.duration);\n//             } else {\n//                 audio.currentTime = 1e101;\n//                 audio.ontimeupdate = function () {\n//                     audio.ontimeupdate = null;\n//                     audio.currentTime = 0;\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\n//                         setDuration(audio.duration);\n//                     }\n//                 };\n//             }\n//         };\n\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n//         audio.load();\n\n//         return () => {\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n//         };\n//     }, [src]);\n\n//     return (\n//         <div className={styles.audioPlayer}>\n//             <audio\n//                 ref={audioRef}\n//                 src={src}\n//                 onTimeUpdate={handleTimeUpdate}\n//                 onEnded={() => setIsPlaying(false)}\n//                 preload=\"auto\"\n//             />\n//             <button\n//                 type='button'\n//                 onClick={togglePlay}\n//                 className={styles.playButton}\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n//             >\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\n//             </button>\n//             <div\n//                 className={styles.progressBar}\n//                 onClick={handleProgressClick}\n//                 role=\"progressbar\"\n//                 aria-valuemin={0}\n//                 aria-valuemax={duration}\n//                 aria-valuenow={currentTime}\n//                 tabIndex={0}\n//             >\n//                 <div\n//                     className={styles.progress}\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\n//                 />\n//             </div>\n//             <AudioTimer\n//                 isPaused={!isPlaying}\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\n//                 withDot={false}\n//             />\n//         </div>\n//     );\n// }\n\n// export default CustomAudioPlayer;\n\n// AudioPlayer.jsx\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = ({\n  src,\n  barCount = 80,\n  barWidth = 2,\n  barGap = 2,\n  playedColor = '#1AAAF5',\n  unplayedColor = '#BBBBBE'\n}) => {\n  _s();\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [peaks, setPeaks] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n\n  // Утилита для форматирования времени в MM:SS\n  const formatTime = time => {\n    if (typeof time !== 'number' || !isFinite(time) || time < 0) return '00:00';\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n  };\n\n  // Загружаем и анализируем аудио, чтобы получить массив амплитуд\n  useEffect(() => {\n    if (!src) return;\n    const fetchAndDecode = async () => {\n      try {\n        const resp = await fetch(src);\n        const arrayBuffer = await resp.arrayBuffer();\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        const buffer = await audioCtx.decodeAudioData(arrayBuffer);\n        const rawData = buffer.getChannelData(0);\n        const blockSize = Math.floor(rawData.length / barCount) || 1;\n        const filtered = new Float32Array(barCount);\n        for (let i = 0; i < barCount; i++) {\n          let sum = 0;\n          for (let j = 0; j < blockSize; j++) {\n            sum += Math.abs(rawData[i * blockSize + j] || 0);\n          }\n          filtered[i] = sum / blockSize;\n        }\n        setPeaks(filtered);\n      } catch (err) {\n        console.error('Audio decode failed', err);\n      }\n    };\n    fetchAndDecode();\n  }, [src, barCount]);\n\n  // Обновляем индекс текущей полоски и текущее время при воспроизведении\n  const onTimeUpdate = useCallback(() => {\n    const audio = audioRef.current;\n    if (!audio || peaks.length === 0 || !isFinite(audio.duration)) return;\n    const idx = Math.floor(audio.currentTime / audio.duration * peaks.length);\n    setCurrentPeakIndex(idx);\n    setCurrentTime(audio.currentTime);\n  }, [peaks.length]);\n\n  // Устанавливаем длительность при загрузке метаданных\n  const onLoadedMetadata = () => {\n    const audio = audioRef.current;\n    if (audio && isFinite(audio.duration)) {\n      setDuration(audio.duration);\n    }\n  };\n\n  // Play / Pause\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  // Перемотка по клику на канвас\n  const onCanvasClick = e => {\n    const canvas = canvasRef.current;\n    if (!canvas || !isFinite(duration)) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const percent = Math.max(0, Math.min(1, x / rect.width));\n    const audio = audioRef.current;\n    if (audio) {\n      audio.currentTime = percent * duration;\n    }\n  };\n\n  // Рисуем полоски в канвасе\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const height = canvas.height;\n    ctx.clearRect(0, 0, canvas.width, height);\n    peaks.forEach((val, i) => {\n      const barHeight = (val || 0) * height;\n      const x = i * (barWidth + barGap);\n      ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\n      ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\n    });\n  }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'inline-block',\n      userSelect: 'none'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: (barWidth + barGap) * barCount,\n      height: 80,\n      style: {\n        verticalAlign: 'middle',\n        cursor: 'pointer'\n      },\n      onClick: onCanvasClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        style: {\n          padding: '6px 12px',\n          fontSize: 14,\n          cursor: 'pointer',\n          borderRadius: 4,\n          border: '1px solid #888',\n          background: isPlaying ? '#f44336' : '#2196F3',\n          color: '#fff'\n        },\n        children: isPlaying ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: 0,\n        max: duration || 0,\n        step: \"0.01\",\n        value: currentTime,\n        onChange: e => {\n          const t = parseFloat(e.target.value);\n          if (isFinite(t)) {\n            audioRef.current.currentTime = t;\n            setCurrentTime(t);\n          }\n        },\n        style: {\n          marginLeft: 10,\n          flexGrow: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 8,\n          fontSize: 12\n        },\n        children: [formatTime(currentTime), \" / \", formatTime(duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: src,\n      onTimeUpdate: onTimeUpdate,\n      onLoadedMetadata: onLoadedMetadata,\n      onEnded: () => setIsPlaying(false),\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioPlayer, \"yaYraMCr/fYIijfVdIaRjNpik8U=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AudioPlayer","src","barCount","barWidth","barGap","playedColor","unplayedColor","_s","audioRef","canvasRef","peaks","setPeaks","isPlaying","setIsPlaying","currentPeakIndex","setCurrentPeakIndex","currentTime","setCurrentTime","duration","setDuration","formatTime","time","isFinite","minutes","Math","floor","seconds","String","padStart","fetchAndDecode","resp","fetch","arrayBuffer","audioCtx","window","AudioContext","webkitAudioContext","buffer","decodeAudioData","rawData","getChannelData","blockSize","length","filtered","Float32Array","i","sum","j","abs","err","console","error","onTimeUpdate","audio","current","idx","onLoadedMetadata","togglePlay","pause","play","onCanvasClick","e","canvas","rect","getBoundingClientRect","x","clientX","left","percent","max","min","width","ctx","getContext","height","clearRect","forEach","val","barHeight","fillStyle","fillRect","style","display","userSelect","children","ref","verticalAlign","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","alignItems","padding","fontSize","borderRadius","border","background","color","type","step","value","onChange","t","parseFloat","target","marginLeft","flexGrow","onEnded","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/custom-audio-player/CustomAudioPlayer.js"],"sourcesContent":["// import React, { useRef, useState, useEffect } from 'react';\r\n// import styles from './CustomAudioPlayer.module.css';\r\n// import pause from '../../../assets/images/custom-audio-player/pause.png';\r\n// import play from '../../../assets/images/custom-audio-player/play.png';\r\n// import AudioTimer from '../audio-recorder/AudioTimer';\r\n\r\n\r\n// function CustomAudioPlayer({ src }) {\r\n//     const audioRef = useRef(null);\r\n//     const [isPlaying, setIsPlaying] = useState(false);\r\n//     const [progress, setProgress] = useState(0);\r\n//     const [duration, setDuration] = useState(0);\r\n//     const [currentTime, setCurrentTime] = useState(0);\r\n\r\n//     const togglePlay = () => {\r\n//         const audio = audioRef.current;\r\n//         if (audio.paused) {\r\n//             audio.play().then(() => {\r\n//                 setIsPlaying(true);\r\n//                 setCurrentTime(audio.currentTime);\r\n//                 setProgress((audio.currentTime / audio.duration) * 100);\r\n//             }).catch((err) => {\r\n//                 console.error(\"Playback failed:\", err);\r\n//             });\r\n//         } else {\r\n//             audio.pause();\r\n//             setIsPlaying(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleTimeUpdate = () => {\r\n//         const audio = audioRef.current;\r\n//         if (!isNaN(audio.duration) && audio.duration > 0) {\r\n//             setCurrentTime(audio.currentTime);\r\n//             setProgress((audio.currentTime / audio.duration) * 100);\r\n//         } else {\r\n//             setProgress(0);\r\n//             setCurrentTime(0);\r\n//         }\r\n//     };\r\n\r\n//     const handleProgressClick = (e) => {\r\n//         if (duration <= 0) return;\r\n\r\n//         const rect = e.currentTarget.getBoundingClientRect();\r\n//         const clickX = e.clientX - rect.left;\r\n//         const newProgress = clickX / rect.width;\r\n//         const audio = audioRef.current;\r\n//         audio.currentTime = newProgress * audio.duration;\r\n//         setProgress(newProgress * 100);\r\n//         setCurrentTime(audio.currentTime);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const audio = audioRef.current;\r\n\r\n//         const handleLoadedMetadata = () => {\r\n//             if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                 setDuration(audio.duration);\r\n//             } else {\r\n//                 audio.currentTime = 1e101;\r\n//                 audio.ontimeupdate = function () {\r\n//                     audio.ontimeupdate = null;\r\n//                     audio.currentTime = 0;\r\n//                     if (!isNaN(audio.duration) && audio.duration !== Infinity) {\r\n//                         setDuration(audio.duration);\r\n//                     }\r\n//                 };\r\n//             }\r\n//         };\r\n\r\n//         audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         audio.load();\r\n\r\n//         return () => {\r\n//             audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n//         };\r\n//     }, [src]);\r\n\r\n\r\n//     return (\r\n//         <div className={styles.audioPlayer}>\r\n//             <audio\r\n//                 ref={audioRef}\r\n//                 src={src}\r\n//                 onTimeUpdate={handleTimeUpdate}\r\n//                 onEnded={() => setIsPlaying(false)}\r\n//                 preload=\"auto\"\r\n//             />\r\n//             <button\r\n//                 type='button'\r\n//                 onClick={togglePlay}\r\n//                 className={styles.playButton}\r\n//                 aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\r\n//             >\r\n//                 {isPlaying ? <img src={pause} alt='Pause' className={styles.play} /> : <img src={play} alt='Play' />}\r\n//             </button>\r\n//             <div\r\n//                 className={styles.progressBar}\r\n//                 onClick={handleProgressClick}\r\n//                 role=\"progressbar\"\r\n//                 aria-valuemin={0}\r\n//                 aria-valuemax={duration}\r\n//                 aria-valuenow={currentTime}\r\n//                 tabIndex={0}\r\n//             >\r\n//                 <div\r\n//                     className={styles.progress}\r\n//                     style={{ width: `${progress === 0 ? 100 : progress}%` }}\r\n//                 />\r\n//             </div>\r\n//             <AudioTimer\r\n//                 isPaused={!isPlaying}\r\n//                 time={currentTime > 0 ? currentTime * 1000 : (duration > 0 ? duration * 1000 : 0)}\r\n//                 withDot={false}\r\n//             />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default CustomAudioPlayer;\r\n\r\n// AudioPlayer.jsx\r\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\r\n\r\nconst AudioPlayer = ({ src, barCount = 80, barWidth = 2, barGap = 2,\r\n    playedColor = '#1AAAF5', unplayedColor = '#BBBBBE' }) => {\r\n    const audioRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [peaks, setPeaks] = useState([]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [currentPeakIndex, setCurrentPeakIndex] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n\r\n    // Утилита для форматирования времени в MM:SS\r\n    const formatTime = (time) => {\r\n        if (typeof time !== 'number' || !isFinite(time) || time < 0) return '00:00';\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = Math.floor(time % 60);\r\n        return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\r\n    };\r\n\r\n    // Загружаем и анализируем аудио, чтобы получить массив амплитуд\r\n    useEffect(() => {\r\n        if (!src) return;\r\n        const fetchAndDecode = async () => {\r\n            try {\r\n                const resp = await fetch(src);\r\n                const arrayBuffer = await resp.arrayBuffer();\r\n                const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n                const buffer = await audioCtx.decodeAudioData(arrayBuffer);\r\n                const rawData = buffer.getChannelData(0);\r\n                const blockSize = Math.floor(rawData.length / barCount) || 1;\r\n                const filtered = new Float32Array(barCount);\r\n                for (let i = 0; i < barCount; i++) {\r\n                    let sum = 0;\r\n                    for (let j = 0; j < blockSize; j++) {\r\n                        sum += Math.abs(rawData[i * blockSize + j] || 0);\r\n                    }\r\n                    filtered[i] = sum / blockSize;\r\n                }\r\n                setPeaks(filtered);\r\n            } catch (err) {\r\n                console.error('Audio decode failed', err);\r\n            }\r\n        };\r\n        fetchAndDecode();\r\n    }, [src, barCount]);\r\n\r\n    // Обновляем индекс текущей полоски и текущее время при воспроизведении\r\n    const onTimeUpdate = useCallback(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio || peaks.length === 0 || !isFinite(audio.duration)) return;\r\n        const idx = Math.floor((audio.currentTime / audio.duration) * peaks.length);\r\n        setCurrentPeakIndex(idx);\r\n        setCurrentTime(audio.currentTime);\r\n    }, [peaks.length]);\r\n\r\n    // Устанавливаем длительность при загрузке метаданных\r\n    const onLoadedMetadata = () => {\r\n        const audio = audioRef.current;\r\n        if (audio && isFinite(audio.duration)) {\r\n            setDuration(audio.duration);\r\n        }\r\n    };\r\n\r\n    // Play / Pause\r\n    const togglePlay = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n        if (isPlaying) {\r\n            audio.pause();\r\n        } else {\r\n            audio.play();\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    // Перемотка по клику на канвас\r\n    const onCanvasClick = (e) => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas || !isFinite(duration)) return;\r\n        const rect = canvas.getBoundingClientRect();\r\n        const x = e.clientX - rect.left;\r\n        const percent = Math.max(0, Math.min(1, x / rect.width));\r\n        const audio = audioRef.current;\r\n        if (audio) {\r\n            audio.currentTime = percent * duration;\r\n        }\r\n    };\r\n\r\n    // Рисуем полоски в канвасе\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        const height = canvas.height;\r\n        ctx.clearRect(0, 0, canvas.width, height);\r\n\r\n        peaks.forEach((val, i) => {\r\n            const barHeight = (val || 0) * height;\r\n            const x = i * (barWidth + barGap);\r\n            ctx.fillStyle = i <= currentPeakIndex ? playedColor : unplayedColor;\r\n            ctx.fillRect(x, (height - barHeight) / 2, barWidth, barHeight);\r\n        });\r\n    }, [peaks, currentPeakIndex, barWidth, barGap, playedColor, unplayedColor]);\r\n\r\n    return (\r\n        <div style={{ display: 'inline-block', userSelect: 'none' }}>\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={(barWidth + barGap) * barCount}\r\n                height={80}\r\n                style={{ verticalAlign: 'middle', cursor: 'pointer' }}\r\n                onClick={onCanvasClick}\r\n            />\r\n            <div style={{ marginTop: 8, display: 'flex', alignItems: 'center' }}>\r\n                <button\r\n                    onClick={togglePlay}\r\n                    style={{\r\n                        padding: '6px 12px',\r\n                        fontSize: 14,\r\n                        cursor: 'pointer',\r\n                        borderRadius: 4,\r\n                        border: '1px solid #888',\r\n                        background: isPlaying ? '#f44336' : '#2196F3',\r\n                        color: '#fff',\r\n                    }}\r\n                >\r\n                    {isPlaying ? 'Pause' : 'Play'}\r\n                </button>\r\n                <input\r\n                    type=\"range\"\r\n                    min={0}\r\n                    max={duration || 0}\r\n                    step=\"0.01\"\r\n                    value={currentTime}\r\n                    onChange={(e) => {\r\n                        const t = parseFloat(e.target.value);\r\n                        if (isFinite(t)) {\r\n                            audioRef.current.currentTime = t;\r\n                            setCurrentTime(t);\r\n                        }\r\n                    }}\r\n                    style={{ marginLeft: 10, flexGrow: 1 }}\r\n                />\r\n                <span style={{ marginLeft: 8, fontSize: 12 }}>\r\n                    {formatTime(currentTime)} / {formatTime(duration)}\r\n                </span>\r\n            </div>\r\n            <audio\r\n                ref={audioRef}\r\n                src={src}\r\n                onTimeUpdate={onTimeUpdate}\r\n                onLoadedMetadata={onLoadedMetadata}\r\n                onEnded={() => setIsPlaying(false)}\r\n                style={{ display: 'none' }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AudioPlayer;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}