{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomarbeit\\\\Project\\\\Frontend\\\\frontend\\\\src\\\\blocks\\\\shared\\\\audio-recorder\\\\AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styles from './AudioRecorder.module.css';\nimport AudioControls from './AudioControls';\nimport AudioTimer from './AudioTimer';\nimport microfon from '../../../assets/images/message-form/microfon.png';\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioRecorder({\n  audioRecordingControl\n}) {\n  _s();\n  const [isRecorderOpen, setIsRecorderOpen] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunks = useRef([]);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const intervalRef = useRef(null);\n  const [audioSrc, setAudioSrc] = useState(null);\n  const [previewReady, setPreviewReady] = useState(false);\n\n  // Таймер записи\n  useEffect(() => {\n    if (isRecording && !isPaused) {\n      intervalRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      clearInterval(intervalRef.current);\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [isRecording, isPaused]);\n\n  // Начало записи\n  const startRecording = async () => {\n    if (!isRecorderOpen) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const recorder = new MediaRecorder(stream);\n        chunks.current = [];\n        recorder.ondataavailable = e => {\n          if (e.data && e.data.size > 0) {\n            chunks.current.push(e.data);\n          }\n        };\n        recorder.onstop = () => {\n          const blob = new Blob(chunks.current, {\n            type: 'audio/webm'\n          });\n          const url = URL.createObjectURL(blob);\n          setAudioSrc(url);\n          setPreviewReady(true);\n        };\n        recorder.start();\n        mediaRecorderRef.current = recorder;\n        setIsRecorderOpen(true);\n        setIsRecording(true);\n        setIsPaused(false);\n        setRecordingTime(0);\n      } catch (err) {\n        console.error('Ошибка доступа к микрофону:', err);\n      }\n    } else {\n      handleCancel();\n    }\n  };\n\n  // Остановка записи — возвращает Promise, чтобы дождаться завершения\n  const stopRecording = () => {\n    return new Promise(resolve => {\n      const recorder = mediaRecorderRef.current;\n      if (recorder && recorder.state !== 'inactive') {\n        recorder.onstop = () => {\n          const blob = new Blob(chunks.current, {\n            type: 'audio/webm'\n          });\n          const url = URL.createObjectURL(blob);\n          setAudioSrc(url);\n          setPreviewReady(true);\n          resolve();\n        };\n        recorder.requestData();\n        recorder.stop();\n        setIsRecording(false);\n        setIsPaused(false);\n      } else {\n        resolve();\n      }\n    });\n  };\n\n  // Пауза\n  const pauseRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.pause();\n      setIsPaused(true);\n    }\n  };\n\n  // Возобновление\n  const resumeRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'paused') {\n      mediaRecorderRef.current.resume();\n      setIsPaused(false);\n    }\n  };\n\n  // Отправка аудио — ждем, пока запись остановится и файл будет готов\n  const handleSend = async () => {\n    await stopRecording();\n    if (!audioSrc) {\n      console.warn('Аудио не готово к отправке');\n      return;\n    }\n    try {\n      const response = await fetch(audioSrc);\n      const blob = await response.blob();\n      const file = new File([blob], 'audio-message.webm', {\n        type: 'audio/webm'\n      });\n      audioRecordingControl.setAudio({\n        type: file.type,\n        name: file.name,\n        id: 'audio_' + Date.now(),\n        file: file,\n        size: file.size,\n        src: audioSrc\n      });\n\n      // Очистка состояния\n      chunks.current = [];\n      setAudioSrc(null);\n      setPreviewReady(false);\n      setIsRecorderOpen(false);\n      setRecordingTime(0);\n    } catch (err) {\n      console.error('Ошибка при обработке аудио для отправки:', err);\n    }\n  };\n\n  // Отмена записи и сброс состояния\n  const handleCancel = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    chunks.current = [];\n    setAudioSrc(null);\n    setPreviewReady(false);\n    setIsRecorderOpen(false);\n    setIsRecording(false);\n    setIsPaused(false);\n    setRecordingTime(0);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: startRecording,\n      children: isRecorderOpen ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: microfonSelected,\n        alt: \"stop audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        src: microfon,\n        alt: \"record audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), isRecorderOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.modal,\n      children: isRecording && !previewReady && /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPaused: isPaused,\n        pauseRecording: pauseRecording,\n        resumeRecording: resumeRecording,\n        stopRecording: stopRecording,\n        cancelRecording: handleCancel,\n        onSend: handleSend,\n        children: /*#__PURE__*/_jsxDEV(AudioTimer, {\n          isPaused: isPaused,\n          time: recordingTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioRecorder, \"ORTE1ExY8rzBp8BZSrRYdvjxGjc=\");\n_c = AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styles","AudioControls","AudioTimer","microfon","microfonSelected","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecorder","audioRecordingControl","_s","isRecorderOpen","setIsRecorderOpen","isRecording","setIsRecording","isPaused","setIsPaused","mediaRecorderRef","chunks","recordingTime","setRecordingTime","intervalRef","audioSrc","setAudioSrc","previewReady","setPreviewReady","current","setInterval","prev","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","ondataavailable","e","data","size","push","onstop","blob","Blob","type","url","URL","createObjectURL","start","err","console","error","handleCancel","stopRecording","Promise","resolve","state","requestData","stop","pauseRecording","pause","resumeRecording","resume","handleSend","warn","response","fetch","file","File","setAudio","name","id","Date","now","src","children","onClick","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","modal","cancelRecording","onSend","time","_c","$RefreshReg$"],"sources":["D:/Diplomarbeit/Project/Frontend/frontend/src/blocks/shared/audio-recorder/AudioRecorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styles from './AudioRecorder.module.css';\r\nimport AudioControls from './AudioControls';\r\nimport AudioTimer from './AudioTimer';\r\nimport microfon from '../../../assets/images/message-form/microfon.png';\r\nimport microfonSelected from '../../../assets/images/message-form/microfon-selected.png';\r\n\r\nexport default function AudioRecorder({ audioRecordingControl }) {\r\n    const [isRecorderOpen, setIsRecorderOpen] = useState(false);\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const mediaRecorderRef = useRef(null);\r\n    const chunks = useRef([]);\r\n    const [recordingTime, setRecordingTime] = useState(0);\r\n    const intervalRef = useRef(null);\r\n    const [audioSrc, setAudioSrc] = useState(null);\r\n    const [previewReady, setPreviewReady] = useState(false);\r\n\r\n    // Таймер записи\r\n    useEffect(() => {\r\n        if (isRecording && !isPaused) {\r\n            intervalRef.current = setInterval(() => {\r\n                setRecordingTime(prev => prev + 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(intervalRef.current);\r\n        }\r\n        return () => clearInterval(intervalRef.current);\r\n    }, [isRecording, isPaused]);\r\n\r\n    // Начало записи\r\n    const startRecording = async () => {\r\n        if (!isRecorderOpen) {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                const recorder = new MediaRecorder(stream);\r\n\r\n                chunks.current = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    if (e.data && e.data.size > 0) {\r\n                        chunks.current.push(e.data);\r\n                    }\r\n                };\r\n\r\n                recorder.onstop = () => {\r\n                    const blob = new Blob(chunks.current, { type: 'audio/webm' });\r\n                    const url = URL.createObjectURL(blob);\r\n                    setAudioSrc(url);\r\n                    setPreviewReady(true);\r\n                };\r\n\r\n                recorder.start();\r\n                mediaRecorderRef.current = recorder;\r\n\r\n                setIsRecorderOpen(true);\r\n                setIsRecording(true);\r\n                setIsPaused(false);\r\n                setRecordingTime(0);\r\n            } catch (err) {\r\n                console.error('Ошибка доступа к микрофону:', err);\r\n            }\r\n        } else {\r\n            handleCancel();\r\n        }\r\n    };\r\n\r\n    // Остановка записи — возвращает Promise, чтобы дождаться завершения\r\n    const stopRecording = () => {\r\n        return new Promise((resolve) => {\r\n            const recorder = mediaRecorderRef.current;\r\n            if (recorder && recorder.state !== 'inactive') {\r\n                recorder.onstop = () => {\r\n                    const blob = new Blob(chunks.current, { type: 'audio/webm' });\r\n                    const url = URL.createObjectURL(blob);\r\n                    setAudioSrc(url);\r\n                    setPreviewReady(true);\r\n                    resolve();\r\n                };\r\n                recorder.requestData();\r\n                recorder.stop();\r\n                setIsRecording(false);\r\n                setIsPaused(false);\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n\r\n    // Пауза\r\n    const pauseRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\r\n            mediaRecorderRef.current.pause();\r\n            setIsPaused(true);\r\n        }\r\n    };\r\n\r\n    // Возобновление\r\n    const resumeRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'paused') {\r\n            mediaRecorderRef.current.resume();\r\n            setIsPaused(false);\r\n        }\r\n    };\r\n\r\n    // Отправка аудио — ждем, пока запись остановится и файл будет готов\r\n    const handleSend = async () => {\r\n        await stopRecording();\r\n\r\n        if (!audioSrc) {\r\n            console.warn('Аудио не готово к отправке');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(audioSrc);\r\n            const blob = await response.blob();\r\n            const file = new File([blob], 'audio-message.webm', { type: 'audio/webm' });\r\n\r\n            audioRecordingControl.setAudio({\r\n                type: file.type,\r\n                name: file.name,\r\n                id: 'audio_' + Date.now(),\r\n                file: file,\r\n                size: file.size,\r\n                src: audioSrc,\r\n            });\r\n\r\n            // Очистка состояния\r\n            chunks.current = [];\r\n            setAudioSrc(null);\r\n            setPreviewReady(false);\r\n            setIsRecorderOpen(false);\r\n            setRecordingTime(0);\r\n        } catch (err) {\r\n            console.error('Ошибка при обработке аудио для отправки:', err);\r\n        }\r\n    };\r\n\r\n    // Отмена записи и сброс состояния\r\n    const handleCancel = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\r\n            mediaRecorderRef.current.stop();\r\n        }\r\n        chunks.current = [];\r\n        setAudioSrc(null);\r\n        setPreviewReady(false);\r\n        setIsRecorderOpen(false);\r\n        setIsRecording(false);\r\n        setIsPaused(false);\r\n        setRecordingTime(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={startRecording}>\r\n                {isRecorderOpen ? (\r\n                    <img src={microfonSelected} alt=\"stop audio\" />\r\n                ) : (\r\n                    <img src={microfon} alt=\"record audio\" />\r\n                )}\r\n            </button>\r\n\r\n            {isRecorderOpen && (\r\n                <div className={styles.modal}>\r\n                    {isRecording && !previewReady && (\r\n                        <AudioControls\r\n                            isPaused={isPaused}\r\n                            pauseRecording={pauseRecording}\r\n                            resumeRecording={resumeRecording}\r\n                            stopRecording={stopRecording}\r\n                            cancelRecording={handleCancel}\r\n                            onSend={handleSend}\r\n                        >\r\n                            <AudioTimer isPaused={isPaused} time={recordingTime} />\r\n                        </AudioControls>\r\n                    )}\r\n\r\n                    {/* Если нужно, можно раскомментировать AudioPreview */}\r\n                    {/* {previewReady && (\r\n                        <AudioPreview\r\n                            audioSrc={audioSrc}\r\n                            onCancel={handleCancel}\r\n                            onSend={handleSend}\r\n                        />\r\n                    )} */}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}